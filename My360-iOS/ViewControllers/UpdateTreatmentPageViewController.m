//
//  UpdateTreatmentPageViewController.m
//  MSPatient
//
//  Generated by AnyPresence, Inc on 2013-03-02
//  Copyright (c) 2013. All rights reserved.
//

#import <APSDK/AuthManager.h>
#import <APSDK/PatientTreatment+Remote.h>
#import <APSDK/User.h>
#import "ConfigurationManager.h"
#import <APSDK/PatientAdherenceLog.h>
#import "AuthManager+Rules.h"
#import "MBProgressHUD.h"
#import "UIViewController+UI.h"
#import "UpdateTreatmentPageViewController.h"
#import "TreatmentTypeViewController.h"
#import "MedicationViewController.h"
#import "ScheduleDetailsViewController.h"
#import "EditDosagePageViewController.h"
#import "EditAdherencePageViewController.h"
#import "LoadingTableViewCell.h"
#import "AdherenceCell.h"
#import "PikConstants.h"
#import "ChartsListViewController.h"
#import "TreatmentListPageViewController.h"
#import <APSDK/APObject+Remote.h>
//#import "APNavigationController.h"
#import <APSDK/APObject+RemoteRelationships.h>

@interface UpdateTreatmentPageViewController () <UIPickerViewDelegate, UIPickerViewDataSource>

@property (nonatomic, weak) IBOutlet UITextField * dosageTextField;
@property (nonatomic, weak) IBOutlet UITextField * endedOnTextField;
@property (nonatomic, weak) IBOutlet UITextField * ingestionMethodIdTextField;
@property (nonatomic, weak) IBOutlet UITextField * medicationBrandNameTextField;
@property (nonatomic, weak) IBOutlet UITextField * startedOnTextField;
@property (nonatomic, weak) IBOutlet UITextField * treatmentScheduleIdTextField;
@property (nonatomic, weak) IBOutlet UITextField * treatmentTypeIdTextField;

@property (nonatomic, strong, readonly) UIPickerView * inputIngestionMethodPicker;

- (BOOL)saveTapped;
- (void)refresh;


@end

@implementation UpdateTreatmentPageViewController

@synthesize inputIngestionMethodPicker = _inputIngestionMethodPicker;
@synthesize dosageData;

@synthesize medicationCell;
@synthesize dosageCell;
@synthesize ingestionMethodCell;
@synthesize scheduleCell;

@synthesize currentScheduleDate;
@synthesize nextScheduleDate;
@synthesize chartButton;




#pragma mark - Public

- (void)setPatientTreatment:(PatientTreatment *)patientTreatment {
    if (_patientTreatment != patientTreatment) {
        _patientTreatment = patientTreatment;
        
        if ([self isViewLoaded])
            [self refresh];
    }
}

#pragma mark - Actions

- (BOOL)saveTapped {
    NSLog(@"Before self.dosageTextField.text = %lu", (unsigned long)self.dosageTextField.text.length);
    self.dosageTextField.text = [self.dosageTextField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
    NSLog(@"After self.dosageTextField.text = %lu", (unsigned long)self.dosageTextField.text.length);
    
    //Nothing Changed, Don't Save
    if (!((TreatmentListPageViewController *)self.delegate).reloadDataOnLoad)return true;
    
    //Check always required fields
    if (self.startedOnTextField.text.length == 0) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A start day is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        return false;

    }
    
    if (self.endedOnTextField.text.length == 0) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A start day is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        return false;
        
    }
    
    else if ([[[self configureDateFormatter:self.dateFormatter field:self.startedOnTextField] dateFromString:self.startedOnTextField.text] compare:[[self configureDateFormatter:self.dateFormatter field:self.endedOnTextField] dateFromString:self.endedOnTextField.text]] == NSOrderedDescending) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"Start date can not be later than end date." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        return false;
    }
    else if (self.treatmentTypeIdTextField.text.length == 0) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A treatment type is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        return false;
        
    }
    else if (self.treatmentScheduleIdTextField.text.length == 0) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A schedule is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        return false;
        
    }
    else if ([[[self dateFormatterWithTimeZone:[NSTimeZone timeZoneWithAbbreviation:@"UTC"]] dateFromString:self.startedOnTextField.text] compare:self.currentScheduleDate] == NSOrderedDescending) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"You can not have a treatment schedule date before the treatment starts." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        return false;
    }

    else if (!self.currentScheduleDate) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A schedule start date is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        return false;
        
    }
    else if (!self.nextScheduleDate){
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A schedule frequency is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        return false;
    }
//---------------------------------------------------
// Comment out by rvera 9/29/14 there are not suppose to be require if you dont select medication
//
//    else if (self.ingestionMethodIdTextField.text.length == 0) {
//        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"An administration method is required-2." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
//        [alert show];
//        return false;
//    }
//    else if (self.dosageTextField.text.length == 0){
//        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A dosage amount is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
//        [alert show];
//        
//        NSLog(@"Dosage: %@",self.dosageTextField);
//        NSLog(@"Dosage: %@",self.dosageTextField);
//        NSLog(@"Dosage: %@",self.dosageTextField);
//        return false;
//    }
//---------------------------------------------------

    /*else if([self.nextScheduleDate compare:[NSDate date]] == NSOrderedAscending){
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"You can not schedule a medication in the past." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        return false;
    }*/

    //Check Medication required fields
    else if ([self.treatmentType.id isEqualToNumber:@1]) {
        if (self.medicationBrandNameTextField.text.length == 0) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A medication name is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            return false;
            
        }
        else if (self.dosageTextField.text.length == 0) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A dosage amount is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            return false;
            
        }
        else if (self.ingestionMethodIdTextField.text.length == 0) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"An administration method is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            return false;
            
        }
    }
    
    if (self.editMode) {
        
        self.patientTreatment.endOn = self.endedOnTextField.text.length > 0 ? [[self configureDateFormatter:self.dateFormatter field:self.endedOnTextField] dateFromString:self.endedOnTextField.text] : nil;
        self.patientTreatment.startOn = [[self configureDateFormatter:self.dateFormatter field:self.startedOnTextField] dateFromString:self.startedOnTextField.text];
        self.patientTreatment.treatmentSchedule = self.treatmentSchedule;
        self.patientTreatment.treatmentType = self.treatmentType;
        if (![self.treatmentType.id isEqualToNumber:@1]) {
            self.patientTreatment.medication = nil;
            self.patientTreatment.dosage = nil;
            self.patientTreatment.dosageUom = nil;
            self.patientTreatment.ingestionMethod = nil;
        }
        else{
            self.patientTreatment.dosage = self.dosage;
            self.patientTreatment.dosageUom = self.dosageUom;
            self.patientTreatment.ingestionMethod = self.ingestionMethod;
            self.patientTreatment.medication = self.medication;
        }
        [[self patientTreatment] setCurrentScheduleOn:[self currentScheduleDate]];
        [[self patientTreatment] setNextScheduleOn:[self nextScheduleDate]];
        
        
        [self pushBusyOperation];
        NSError *err = nil;
        [self.patientTreatment update:&err];
        [self popBusyOperation];
        if(!err){
            return true;
        }
        else return false;
    }
    else {
        
        PatientTreatment * patientTreatment = [PatientTreatment new];
        patientTreatment.patientId = ((User *)[AuthManager defaultManager].currentCredentials).id;
        patientTreatment.endOn = self.endedOnTextField.text.length > 0 ? [[self configureDateFormatter:self.dateFormatter field:self.endedOnTextField] dateFromString:self.endedOnTextField.text] : nil;
        patientTreatment.startOn = [[self configureDateFormatter:self.dateFormatter field:self.startedOnTextField] dateFromString:self.startedOnTextField.text];
        
        TreatmentSchedule *ts = [TreatmentSchedule new];
        ts.id = self.treatmentSchedule.id;
        ts.inactive = self.treatmentSchedule.inactive;
        ts.name = self.treatmentSchedule.name;
        ts.reminderInterval = self.treatmentSchedule.reminderInterval;
        ts.sortOrder = self.treatmentSchedule.sortOrder;
        ts.timesPerDay = self.treatmentSchedule.timesPerDay;
        patientTreatment.treatmentSchedule = ts;
        
        TreatmentType *tt = [TreatmentType new];
        tt.id = self.treatmentType.id;
        tt.inactive = self.treatmentType.inactive;
        tt.name = self.treatmentType.name;
        patientTreatment.treatmentType = tt;
        
        [patientTreatment setCurrentScheduleOn:[self currentScheduleDate]];
        [patientTreatment setNextScheduleOn:[self nextScheduleDate]];
        
        if (![self.treatmentType.id isEqualToNumber:@1]) {
            patientTreatment.medication = nil;
            patientTreatment.dosage = nil;
            patientTreatment.dosageUom = nil;
            patientTreatment.ingestionMethod = nil;
        }
        else{
            patientTreatment.dosage = self.dosage;
            
            DosageUom *du = [DosageUom new];
            du.id = self.dosageUom.id;
            du.inactive = self.dosageUom.inactive;
            du.name = self.dosageUom.name;
            patientTreatment.dosageUom = du;
            
            IngestionMethod *im = [IngestionMethod new];
            im.id = self.ingestionMethod.id;
            im.inactive = self.ingestionMethod.inactive;
            im.name = self.ingestionMethod.name;
            patientTreatment.ingestionMethod = im;
            
            Medication *m = [Medication new];
            m.id = self.medication.id;
            //m.category = self.medication.category;    //RV New lable on API for SymtomsCat, TestTypeCat and medicationCat comented 6/8/15
            m.medicationCat = self.medication.medicationCat;
            m.inactive = self.medication.inactive;
            m.name = self.medication.name;
            m.subCategory = self.medication.subCategory;
            patientTreatment.medication = m;
        }
        

        [self pushBusyOperation];        
        NSError *err = nil;
        [patientTreatment create:&err];
        [self popBusyOperation];
        if (err) {
            if(ERROR_CODE_401(err)) {
                AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication] delegate];
                [app showSessionTerminatedAlert];
            }
            else [self showMessage:@"Treatment record failed to add."];
            return false;
        } else {
            [self dismissViewControllerAnimated:YES completion:nil];
            return true;
        };
    }
}


-(void)createAdherence
{
    [self.delegate userInteractedWithViewController:self];
    [self performSegueWithIdentifier:@"ShowAddAdherencePageViewController" sender:nil];
    
}


- (UIPickerView *)inputIngestionMethodPicker {
    if (!_inputIngestionMethodPicker) {
        _inputIngestionMethodPicker = [[UIPickerView alloc] initWithFrame:CGRectZero];
        
        _inputIngestionMethodPicker.delegate = self;
        _inputIngestionMethodPicker.dataSource = self;
        _inputIngestionMethodPicker.showsSelectionIndicator = YES;
        
        [_inputIngestionMethodPicker sizeToFit];
    }
    
    return _inputIngestionMethodPicker;
}


//Update Treatment to show Medication cells --rvera 11/13/14
- (void)treatmentTypeSelected:(NSNotification *) notification
{
    [self.delegate userInteractedWithViewController:self];
    if ([[notification name] isEqualToString:@"selectedTreatmentType"]){
        
        [self.navigationController popViewControllerAnimated:YES];
        
        NSDictionary *userInfo = notification.userInfo;
        
        self.treatmentType = [userInfo objectForKey:@"treatmentType"];
        self.treatmentTypeIdTextField.text = self.treatmentType.name;
        
        if ([self.treatmentType.id isEqualToNumber:@1]) {
            
            self.medicationCell.hidden = NO;
            self.dosageCell.hidden = NO;
            self.ingestionMethodCell.hidden = NO;
            
        }
        else {
            
            self.medicationCell.hidden = YES;
            self.dosageCell.hidden = YES;
            self.ingestionMethodCell.hidden = YES;
            self.medication = nil;
            self.dosage = nil;
            self.dosageUom = nil;
            self.ingestionMethod = nil;
            
        }

        [self.tableView reloadData];
        
    }
}


- (void)medicationSelected:(NSNotification *) notification
{
    [self.delegate userInteractedWithViewController:self];
    if ([[notification name] isEqualToString:@"selectedMedication"]){
        
        [self.navigationController popViewControllerAnimated:YES];
        
        NSDictionary *userInfo = notification.userInfo;
        
        self.medication = [userInfo objectForKey:@"medication"];
        self.medicationBrandNameTextField.text = self.medication.name;
        
        [self.tableView reloadData];
        
    }
}


- (void)dosageSelected:(NSNotification *) notification
{
    [self.delegate userInteractedWithViewController:self];
    if ([[notification name] isEqualToString:@"selectedDosage"]){
        
        [self.navigationController popViewControllerAnimated:YES];
        
        NSDictionary *userInfo = notification.userInfo;
        
        self.dosage = [userInfo objectForKey:@"dosage"];
        self.dosageUom = [userInfo objectForKey:@"dosageUom"];
        

        NSString *labelText = [NSString stringWithFormat:@"%@  %@", [self.dosage stringValue], self.dosageUom.name];

        self.dosageTextField.text = labelText;
        
        [self.tableView reloadData];
        
    }
}


- (void)scheduleSelected:(NSNotification *) notification
{
    [self.delegate userInteractedWithViewController:self];
    if ([[notification name] isEqualToString:@"selectedScheduleDetails"]){
        
        [self.navigationController popViewControllerAnimated:YES];
        
        NSDictionary *userInfo = notification.userInfo;
        
        self.treatmentSchedule = [userInfo objectForKey:@"schedule"];
        self.treatmentScheduleIdTextField.text = self.treatmentSchedule.name;
        self.currentScheduleDate = [userInfo objectForKey:@"currentScheduleDate"];
        self.nextScheduleDate = [userInfo objectForKey:@"nextScheduleDate"];
        
        [self.tableView reloadData];
        
    }
}


- (void)refresh {
    AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
    for (TreatmentType *treatmentType in ad.treatmentTypeData) {
        if ([treatmentType.id intValue] == [self.patientTreatment.treatmentTypeId intValue]) {
            self.treatmentType = treatmentType;
//            NSLog(@" %@", treatmentType.name);
            break;
        }
    }
    for (Medication *medication in ad.medicationData) {
        if ([medication.id intValue] == [self.patientTreatment.medicationId intValue]) {
            self.medication = medication;
            break;
        }
    }
    for (DosageUom *dosageUom in ad.dosageUomData) {
        if ([dosageUom.id intValue] == [self.patientTreatment.dosageUomId intValue]) {
            self.dosageUom = dosageUom;
            self.dosage = self.patientTreatment.dosage;
            break;
        }
    }
    for (IngestionMethod *ingestionMethod in ad.ingestionMethodData) {
        if ([ingestionMethod.id intValue] == [self.patientTreatment.ingestionMethodId intValue]) {
            self.ingestionMethod = ingestionMethod;
            break;
        }
    }
    for (TreatmentSchedule *treatmentSchedule in ad.treatmentScheduleData) {
        if ([treatmentSchedule.id intValue] == [self.patientTreatment.treatmentScheduleId intValue]) {
            self.treatmentSchedule = treatmentSchedule;
            break;
        }
    }
    NSDateFormatter *df = [self dateFormatterWithTimeZone:[NSTimeZone timeZoneWithAbbreviation:@"UTC"]];
    self.startedOnTextField.text = [[self configureDateFormatter:df field:self.startedOnTextField] stringFromDate:self.patientTreatment.startOn];
    self.endedOnTextField.text = [[self configureDateFormatter:df field:self.endedOnTextField] stringFromDate:self.patientTreatment.endOn];
    self.treatmentTypeIdTextField.text = self.patientTreatment.treatmentTypeDenormalized;
 
    // added for Label for Diabetes APP in TREATMENTS         - svaz 5/7/14
    NSInteger appID = [[[ConfigurationManager sharedManager] appID] integerValue];
    if ([self.treatmentTypeIdTextField.text isEqualToString:@"Medication"] && appID == 5) {
       self.treatmentTypeIdTextField.text =@"Diabetes Medication";
    }
    
    self.medicationBrandNameTextField.text = self.patientTreatment.medicationDenormalized;
    NSString *labelText = [NSString stringWithFormat:@"%@  %@", [self.patientTreatment.dosage stringValue] == NULL ? @"" : [self.patientTreatment.dosage stringValue], self.patientTreatment.dosageUomDenormalized == NULL ? @"" : self.patientTreatment.dosageUomDenormalized ];
    self.dosageTextField.text = labelText;
    self.ingestionMethodIdTextField.text = self.patientTreatment.ingestionMethodDenormalized;
    self.treatmentScheduleIdTextField.text = self.patientTreatment.treatmentScheduleDenormalized;
    [self setCurrentScheduleDate:self.patientTreatment.currentScheduleOn];
    [self setNextScheduleDate:self.patientTreatment.nextScheduleOn];
    
    if ([self.patientTreatment.treatmentTypeId isEqualToNumber:@1]) {
        self.medicationCell.hidden = NO;
        self.dosageCell.hidden = NO;
        self.ingestionMethodCell.hidden = NO;
        self.scheduleCell.hidden= NO;
    }
    else {
        
        self.medicationCell.hidden = YES;
        self.dosageCell.hidden = YES;
        self.ingestionMethodCell.hidden = YES;
        //self.scheduleCell.hidden= YES;
    }
    [self.tableView reloadData];
}


#pragma mark - UITableView Delegate


- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (tableView == self.tableView) {
        return [super tableView:tableView cellForRowAtIndexPath:indexPath];
    }
    
    return nil;
}

//  ios cleanup cell rvera  2/10/15
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    CGFloat rowHeight =  kRowHeight;
    UITableViewCell *cell = [super tableView:tableView cellForRowAtIndexPath:indexPath];
    
    if (cell.hidden) {
        return 0;
    } else {
       // return [super tableView:tableView heightForRowAtIndexPath:indexPath];
        return rowHeight;
    }
}



//- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
//{
//    //            - ios cleanup svaz 1/12/15
//   /// CGFloat rowHeight = 44;
//    CGFloat rowHeight =  kRowHeight;
//    //if (![self.patientTreatment.treatmentTypeId isEqualToNumber:@1]){
//     if (![self.treatmentType.id isEqualToNumber:@1]) {
//        //hide these rows if the treatmentType is not medication
//        if (indexPath.section == 0) {
//            
//            switch (indexPath.row) {
//                case 3:
//                case 4:
//                case 5:
//                    rowHeight = 0;
//                break;
//                    
//                default:
//                    break;
//            }
//        }
//    }
//    return rowHeight;
//}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    if (section == 1) {
        return 40;
    }
    
    return 0;
}



- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    NSInteger numberOfSections = 1;
    
    if (self.editMode) {
        numberOfSections = 2;
    }
    
    return numberOfSections;
}


- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if (tableView == self.tableView) {
        if (section == 0) {
            return [super tableView:tableView numberOfRowsInSection:section];
        }
    }
    
    return 0;
}


-(BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath
{
    return NO;
}


-(BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath
{
    return NO;
}


-(UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return UITableViewCellEditingStyleNone;
}


- (NSInteger)tableView:(UITableView *)tableView indentationLevelForRowAtIndexPath:(NSIndexPath *)indexPath
{
    long section = indexPath.section;
    
    // if dynamic section make all rows the same indentation level as row 0
    if (section == 1) {
        return [super tableView:tableView indentationLevelForRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:section]];
    } else {
        return [super tableView:tableView indentationLevelForRowAtIndexPath:indexPath];
    }
}


#pragma mark - UITextFieldDelegate

- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField {
    
    [self.delegate userInteractedWithViewController:self];
    if (textField.tag == kFormViewControllerFieldDate) {
        if (textField.text.length > 0) {
            NSDateFormatter * formatter = [self configureDateFormatter:self.dateFormatter field:textField];
            self.inputViewDatePicker.date = [formatter dateFromString:textField.text];
         }
        else {
            NSDateFormatter * formatter = [self configureDateFormatter:self.dateFormatter field:textField];
            textField.text = [formatter stringFromDate:self.inputViewDatePicker.date];
            [self buttonPressedStartDateMsg]; //This requested was by PD to make sure this is global to all the apps-- 10/7/14 rvera
        }
            self.inputViewDatePicker.datePickerMode = UIDatePickerModeDate;
 }
    
    
    if (textField == self.ingestionMethodIdTextField) {
        if (textField.text.length > 0) {
            //set picker value to previously selected item
            AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
            NSInteger row=[ad.ingestionMethodData indexOfObject:self.ingestionMethod];
            [self.inputIngestionMethodPicker selectRow:row inComponent:0 animated:YES];
        }
        else {
            //set default
            AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
            self.ingestionMethod = [ad.ingestionMethodData objectAtIndex:0];
            textField.text = self.ingestionMethod.name;
        }
    }
    
    
    return YES;
}


#pragma mark - PickerView delegate

-(NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView
{
    
    return 1;
}


-(NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component
{
    AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
    return ad.ingestionMethodData.count;
}


-(NSString*)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component
{
    AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
    IngestionMethod *ingestionMethod = [ad.ingestionMethodData objectAtIndex:row];
    return ingestionMethod.name;
    
}


- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component
{
    AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
    self.ingestionMethod = [ad.ingestionMethodData objectAtIndex:row];
    self.ingestionMethodIdTextField.text = self.ingestionMethod.name;
    [self.delegate userInteractedWithViewController:self];
}


#pragma mark - UIViewController
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    //((APNavigationController *)self.navigationController).allowBackBlock = nil;
    [self.delegate userInteractedWithViewController:self];
    
    if ([segue.identifier isEqualToString:@"TypeSegue"])
    {
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        TreatmentTypeViewController *controller = (TreatmentTypeViewController *)[segue destinationViewController];
        controller.tableData = ad.treatmentTypeData;
    }
    else if ([segue.identifier isEqualToString:@"MedicationSegue"])
    {
        MedicationViewController *controller = (MedicationViewController *)[segue destinationViewController];
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        [controller setTableData:ad.medicationData];
    }
    else if ([segue.identifier isEqualToString:@"DosageSegue"])
    {
        EditDosagePageViewController *controller = (EditDosagePageViewController *)[segue destinationViewController];
        controller.dosageUom = self.dosageUom;
        controller.dosage = self.dosage;
    }
    else if ([segue.identifier isEqualToString:@"ScheduleDetailSegue"])
    {
        ScheduleDetailsViewController *controller = (ScheduleDetailsViewController *)[segue destinationViewController];
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        [controller setTreatmentScheduleData:[ad treatmentScheduleData]];
        [controller setTreatmentSchedule:[self treatmentSchedule]];
        [controller setCurrentScheduleDate:[self currentScheduleDate]];
        [controller setNextScheduleDate:[self nextScheduleDate]];
    }
    else if ([segue.identifier isEqualToString:@"ShowEditAdherencePageViewController"]) {
        ((EditAdherencePageViewController *)segue.destinationViewController).patientAdherenceLog = sender;
        ((EditAdherencePageViewController *)segue.destinationViewController).patientTreatment = self.patientTreatment;
        ((EditAdherencePageViewController *)segue.destinationViewController).editMode = YES;
        
    }
    else if ([segue.identifier isEqualToString:@"ShowAddAdherencePageViewController"]) {
        ((EditAdherencePageViewController *)segue.destinationViewController).patientTreatment = self.patientTreatment;
        ((EditAdherencePageViewController *)segue.destinationViewController).editMode = NO;
        
    }
    else if ([segue.identifier isEqualToString:@"ShowChartsList"]) {
        ((ChartsListViewController *)segue.destinationViewController).patientTreatment = self.patientTreatment;
        
    }
}


- (void)viewDidLoad
{
    [super viewDidLoad];
    self.dosageData = [[NSArray alloc] initWithObjects:@"0",@"1", @"2", @"3", @"4", @"5", @"6", @"7", @"8", @"9", nil];

    self.navigationItem.title = @"My Treatment";
    //  self.navigationItem.title = self.patientTreatment ? [AppDelegate interpolateString:NSLocalizedString(@"My Treatment", @"My Treatment") objectInstance:self.patientTreatment] : nil;
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(treatmentTypeSelected:) name:@"selectedTreatmentType" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(medicationSelected:) name:@"selectedMedication" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(dosageSelected:) name:@"selectedDosage" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(scheduleSelected:) name:@"selectedScheduleDetails" object:nil];

    
    self.endedOnTextField.tag = kFormViewControllerFieldDate;
    self.startedOnTextField.tag = kFormViewControllerFieldDate;
    self.endedOnTextField.placeholder = kFieldPlaceHolderText;
    self.startedOnTextField.placeholder = kFieldPlaceHolderText;
    self.fields = @[ self.startedOnTextField, self.endedOnTextField, self.ingestionMethodIdTextField ];
    self.ingestionMethodIdTextField.placeholder = kFieldPlaceHolderText;
    for (UITextField * field in self.fields) {
        
        field.inputAccessoryView = self.inputAccessoryViewToolbar;
        
        if (field.tag == kFormViewControllerFieldDate) {
            field.inputView = self.inputViewDatePicker;
        }
        
        if (field == self.ingestionMethodIdTextField) {
            field.inputView = self.inputIngestionMethodPicker;
        }
    }
    
    [self refresh];
    
    if (!self.editMode) {
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        self.treatmentType = [ad.treatmentTypeData objectAtIndex:0];
        [self refresh];
    }
}


-(void)viewWillAppear:(BOOL)animated
{
    if(!self.editMode){
        [[[self chartButton] superview] setFrame:CGRectZero];
        [[[self chartButton] superview] setHidden:YES];
    }

    [super viewWillAppear:animated];
    NSLog(@"viewWillAppear -- ");
    //[self loadPatientAdherenceLogData];
}

//
//-(void)viewWillDisappear:(BOOL)animated
//{
//    //[self saveTapped];
//    [super viewWillDisappear:animated];
//    
//    NSLog(@"viewWillDisappear --- uncomment above");
//}


//added globally for unsureLabDate --rvera 10/7/14
- (IBAction)buttonPressedStartDateMsg{
    UIAlertView *alertMsg = [[UIAlertView alloc]initWithTitle: nil // @"ALERT!"
                                                      message: @"“If unsure of date, enter an estimated date.”"
                                                     delegate: nil
                                            cancelButtonTitle:@"OK"
                                            otherButtonTitles:nil];
    [alertMsg show];
    NSLog(@"Button Pressed Start Date Message Tapped");
}

-(void)back{
    if([self saveTapped]) {
        [super back];
    }else{
         return;
    }
    
}



- (void)dealloc {
    NSLog(@"dealloc");
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"selectedTreatmentType" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"selectedMedication" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"selectedDosage" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"selectedScheduleDetails" object:nil];

}
@end
