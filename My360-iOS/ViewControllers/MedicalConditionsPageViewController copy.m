//
//  MedicalConditionsPageViewController.m
//  MSPatient
//
//  Generated by AnyPresence, Inc on 2013-02-26
//  Copyright (c) 2013. All rights reserved.
//

#import <APSDK/AuthManager.h>
#import <APSDK/PatientMedicalCondition+Remote.h>
#import <APSDK/PatientMedicalCondition.h>
#import <APSDK/User.h>
#import <APSDK/MedicalCondition.h>
#import "MultiSelectMedicalConditionPageViewController.h"
#import "AuthManager+Rules.h"
#import "LoadingTableViewCell.h"
#import "MedicalConditionsPageViewController.h"
#import "UIView+APViewExtensions.h"
#import "UIViewController+UI.h"
#import "ContentCell.h"
#import <APSDK/APObject+Remote.h>
#import <APSDK/APObject+RemoteRelationships.h>
#import "PikConstants.h"



@interface MedicalConditionsPageViewController ()

@property (nonatomic, weak) IBOutlet UIBarButtonItem * addMedicalConditionButtonBarButtonItem;

- (IBAction)addMedicalConditionButtonTapped;
- (void)reloadMedicalConditionsPageDataAnimated:(BOOL)animated;

@end

@implementation MedicalConditionsPageViewController

@synthesize medicalConditionData;
@synthesize reloadAll;


#pragma mark - Actions

- (IBAction)addMedicalConditionButtonTapped
{
    [self performSegueWithIdentifier:@"ShowAddMedicalConditionsPageViewController" sender:self];
}


#pragma mark - Private

- (void)reloadMedicalConditionsPageDataAnimated:(BOOL)animated
{
    
    if ([AppDelegate hasConnectivity])
    {
        [self pushBusyOperation];
        __block NSArray * history = [self.tableData copy];
        [PatientMedicalCondition query:@"my_medical_conditions" params:nil offset:self.tableData.count limit:kListLength async:^(NSArray * objects, NSError * error) {
            if (self.navigationController.topViewController == self) {
                self.listDataState = kDataStateReady;
                
                if (error) {
                    [self popBusyOperation];
                    if(ERROR_CODE_401(error)) {
                        AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication] delegate];
                        [app showSessionTerminatedAlert];
                    }
                    else [self showMessage:[error localizedDescription] ? : @"Error"];
                }
                else {
                    [self.tableData removeAllObjects];
                    [self.tableData addObjectsFromArray:history];
                    [self.tableData addObjectsFromArray:objects];
                    if (objects.count > kListLength - 1) {
                        [self.tableData removeLastObject];
                    }
                    else {
                        self.listDataState = kDataStateFull;
                    }
                    
                    if(objects.count > 0){
                        
                        NSError *error;
                        for(PatientMedicalCondition *p in self.tableData){
                            
                            if(![p isRelationshipLoaded:@"medicalCondition"]){
                                
                                [p loadRelationship:@"medicalCondition" error:&error];
                            }
                        }
                    }
                    
                    [self.tableView reloadData];
                    [self resize:self.tableView
                              to:CGSizeMake(CGRectGetWidth(self.tableView.frame),
                                            self.tableData.count * self.tableView.rowHeight +
                                            (self.listDataState == kDataStateFull ? 0 : self.tableView.rowHeight))
                        animated:animated];
                    [self popBusyOperation];
                }
            }
        }];
    }
    else
    {
        [AppDelegate showNoConnecttivityAlert];
    }
}


- (void)medicationsSelected:(NSNotification *) notification
{
    if ([[notification name] isEqualToString:@"selectedMedicationList"]){
        
        [self.navigationController popViewControllerAnimated:YES];
        
        [self reloadMedicalConditionsPageDataAnimated:NO];
    }
}




#pragma mark - UITableViewDataSource

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (tableView == self.tableView) {
        if (indexPath.section == 1) {
            LoadingTableViewCell * cell = (LoadingTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"Loading"];
            
            if (self.listDataState == kDataStateLoading) {
                cell.state = kLoadingTableViewCellStateBusy;
                cell.selectionStyle = UITableViewCellSelectionStyleNone;
            } else {
                cell.state = kLoadingTableViewCellStateReady;
                cell.selectionStyle = UITableViewCellSelectionStyleGray;
            }
            
            return cell;
            
        } else {
            ContentCell * cell = [tableView dequeueReusableCellWithIdentifier:@"Default"];
            PatientMedicalCondition * object = [self.tableData objectAtIndex:indexPath.row];

            cell.contentLabel.text = object.medicalCondition.name;
            
            return cell;
        }
    }
    
    return nil;
}


- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath
{
    return NO;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return self.tableData.count;
}

#pragma mark - UITableViewDelegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (tableView == self.tableView) {
        if (indexPath.section == 1 && self.listDataState == kDataStateReady) {
            ((LoadingTableViewCell *)[tableView cellForRowAtIndexPath:indexPath]).state = kLoadingTableViewCellStateBusy;
            [tableView deselectRowAtIndexPath:indexPath animated:YES];
            
            self.listDataState = kDataStateLoading;
            [self reloadMedicalConditionsPageDataAnimated:YES];
        }
    }
}



#pragma mark - Data

- (void)loadMedicalConditionData
{
    [MedicalCondition query:@"active_medical_condition" params:nil async:^(NSArray * objects, NSError * error) {
        if (error == nil) {
            self.medicalConditionData = [[NSArray alloc]initWithArray:objects];
        }
    }];
}




#pragma mark - UIViewController

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ([segue.identifier isEqualToString:@"ShowAddMedicalConditionsPageViewController"]) {
        ((MultiSelectMedicalConditionPageViewController *)segue.destinationViewController).selectedTableData = self.tableData;//PatientMedicalCondition
        ((MultiSelectMedicalConditionPageViewController *)segue.destinationViewController).tableData = self.medicalConditionData;//MedicalCondition

    }
}


- (void)viewDidLoad
{
    [super viewDidLoad];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(medicationsSelected:) name:@"selectedMedicationList" object:nil];

    self.navigationItem.title = [AppDelegate interpolateString:NSLocalizedString(@"My Medical Conditions", @"My Medical Conditions")];
    
   // [self loadMedicalConditionData];
    
}

-(void)viewDidAppear:(BOOL)animated{
    [super viewDidAppear:animated];
    reloadAll = YES;
    //[self refreshAnimated:animated];
    
    reloadAll = NO;
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self reloadMedicalConditionsPageDataAnimated:animated];
    [self addObservers];
}
-(void) viewWillDisappear:(BOOL)animated{
    [super viewWillDisappear:animated];
    reloadAll = YES;
}


#pragma mark NSObject

- (void)dealloc {
    [self removeObservers];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"selectedMedicationList" object:nil];
}

@end
