//
//  MedicalHistoryPageViewController.m
//  MSPatient
//
//  Generated by AnyPresence, Inc on 2013-02-26
//  Copyright (c) 2013. All rights reserved.
//

#import <APSDK/AuthManager.h>
#import <APSDK/User.h>
#import <APSDK/UserProfile+Remote.h>
#import "AuthManager+Rules.h"
#import "MedicalConditionsPageViewController.h"
#import "MedicalHistoryPageViewController.h"
#import "MedicationPageViewController.h"
#import "EditAllergyPageViewController.h"
#import "UIView+APViewExtensions.h"
#import "UIViewController+UI.h"
#import "UIColor+APColorExtension.h"
#import <APSDK/APObject+Remote.h>
#import "PikConstants.h"

#define ASSET_BY_SCREEN_HEIGHT(regular, longScreen) (([[UIScreen mainScreen] bounds].size.height <= 480.0) ? regular : longScreen)



@interface MedicalHistoryPageViewController () 

@property (nonatomic, weak) IBOutlet UIScrollView * scrollView;
@property (nonatomic, assign) BOOL observersSet;
@property (nonatomic, weak) IBOutlet UIButton * medicalConditionsButtonButton;
@property (nonatomic, weak) IBOutlet UIButton * allergyButtonButton;
@property (nonatomic, weak) IBOutlet UIButton * medicationsButtonButton;
@property (nonatomic, weak) IBOutlet UIView * contentView;

- (IBAction)medicalConditionsButtonTapped;
- (IBAction)allergyButtonTapped;
- (IBAction)medicationsButtonTapped;
- (void)refreshAnimated:(BOOL)animated;
- (void)resize:(UIView *)subview to:(CGSize)newSize animated:(BOOL)animated;
- (void)addObservers;
- (void)removeObservers;

@end

@implementation MedicalHistoryPageViewController

#pragma mark - Actions

- (IBAction)medicalConditionsButtonTapped
{
    [self performSegueWithIdentifier:@"ShowMedicalConditionsPageViewController" sender:self];
}


- (IBAction)allergyButtonTapped
{

    [self performSegueWithIdentifier:@"ShowAllergyPageViewController" sender:self];
}


- (IBAction)medicationsButtonTapped
{
    [self performSegueWithIdentifier:@"ShowMedicationPageViewController" sender:self];
}


#pragma mark - Private

- (void)refreshAnimated:(BOOL)animated {

    [self.medicalConditionsButtonButton setTitle:[[AuthManager defaultManager] isAuthorized:self.medicalConditionsButtonButton] ? [AppDelegate interpolateString:@"My Medical Conditions"] : nil forState:UIControlStateNormal];
    [self resize:self.medicalConditionsButtonButton to:CGSizeMake(CGRectGetWidth(self.medicalConditionsButtonButton.frame), [self.medicalConditionsButtonButton sizeThatFits:CGSizeMake(CGRectGetWidth(self.medicalConditionsButtonButton.frame), CGFLOAT_MAX)].height) animated:animated];
    
    [self.allergyButtonButton setTitle:[[AuthManager defaultManager] isAuthorized:self.allergyButtonButton] ? [AppDelegate interpolateString:@"My Allergies"] : nil forState:UIControlStateNormal];
    [self resize:self.allergyButtonButton to:CGSizeMake(CGRectGetWidth(self.allergyButtonButton.frame), [self.allergyButtonButton sizeThatFits:CGSizeMake(CGRectGetWidth(self.allergyButtonButton.frame), CGFLOAT_MAX)].height) animated:animated];
    
    [self.medicationsButtonButton setTitle:[[AuthManager defaultManager] isAuthorized:self.medicationsButtonButton] ? [AppDelegate interpolateString:@"My Medications"] : nil forState:UIControlStateNormal];
    [self resize:self.medicationsButtonButton to:CGSizeMake(CGRectGetWidth(self.medicationsButtonButton.frame), [self.medicationsButtonButton sizeThatFits:CGSizeMake(CGRectGetWidth(self.medicationsButtonButton.frame), CGFLOAT_MAX)].height) animated:animated];
    
    for (UIView * subview in @[ self.medicalConditionsButtonButton, self.allergyButtonButton, self.medicationsButtonButton ]) {
        if ([[AuthManager defaultManager] isAuthorized:subview]) {
            [self resize:subview to:subview.frame.size animated:animated];
        } else {
            [self resize:subview to:CGSizeZero animated:animated];
        }
    }
}

- (void)addObservers {
    if (!self.observersSet) {
        self.observersSet = YES;
        [[AuthManager defaultManager] addObserver:self forKeyPath:@"currentCredentials" options:0 context:nil];
    }
}

- (void)removeObservers {
    if (self.observersSet) {
        self.observersSet = NO;
        
        [[AuthManager defaultManager] removeObserver:self forKeyPath:@"currentCredentials"];
    }
}


- (void)resize:(UIView *)subview to:(CGSize)newSize animated:(BOOL)animated {
    CGFloat delta = newSize.height - (subview.hidden ? 0.f : CGRectGetHeight(subview.frame));
    if (fabs(delta) > 1.f && subview) {
        CGFloat y = delta > 0 ? CGRectGetMinY(subview.frame) : CGRectGetMaxY(subview.frame);
        
        void (^resize)() = ^{
            if (CGSizeEqualToSize(newSize, CGSizeZero)) {
                subview.hidden = YES;
            } else {
                subview.hidden = NO;
                subview.frame = CGRectIntegral(CGRectMake(CGRectGetMinX(subview.frame),
                                                          CGRectGetMinY(subview.frame),
                                                          newSize.width,
                                                          newSize.height));
            }
            
            for (UIView * child in self.scrollView.subviews) {
                if (child != subview && CGRectGetMinY(child.frame) >= y) {
                    child.frame = CGRectIntegral(CGRectMake(CGRectGetMinX(child.frame),
                                                            CGRectGetMinY(child.frame) + delta,
                                                            CGRectGetWidth(child.frame),
                                                            CGRectGetHeight(child.frame)));
                }
            }
            
                
        };
       
    // TODO: Operation queue
    //    if (animated) {
    //        [UIView animateWithDuration:.5f animations:resize];
    //    } else {
            resize();
    //    }
    
        self.scrollView.contentSize = CGSizeMake(self.scrollView.contentSize.width,
                                                 self.scrollView.contentSize.height + delta);
    }
}

#pragma mark - UIViewController

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ([segue.identifier isEqualToString:@"ShowMedicalConditionsPageViewController"]) {
    }
    else if ([segue.identifier isEqualToString:@"ShowMedicationPageViewController"]) {
    }
    else if ([segue.identifier isEqualToString:@"ShowAllergyPageViewController"]) {
        ((EditAllergyPageViewController *)segue.destinationViewController).userProfile = self.userProfile;

    }
}


- (void)viewDidLoad
{
    [super viewDidLoad];
    
    if (IS_IPAD){
        UIScrollView* scrollView= [self.view.subviews lastObject];
        UIView *view1 = [scrollView.subviews objectAtIndex:0];
        NSLog(@"---View=1 %@", view1);
        //    UIView* contentView= [[UIView alloc] initWithFrame:view1.bounds];
        //    for (UIView *v  in view1.subviews) {
        //        NSLog(@"View== %d, %@",v.tag, v);
        //    }
        
        //view1.layer.transform = CATransform3DMakeScale(2.0, 2.0, 1);
        //view1.layer.transform = CATransform3DMakeScale(768.0/320.0,1024/410.0 , 1);
        view1.layer.transform = CATransform3DMakeScale(768.0/320.0,1024/410.0 , 1);
    }

    
    self.contentView.frame = self.view.bounds;
    self.navigationItem.title = [AppDelegate interpolateString:NSLocalizedString(@"My Medical History", @"My Medical History")];
    
    //self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"Cancel" style:UIBarButtonItemStyleBordered target:nil  action:nil];

    [self loadProfileData];
    
  //  self.contentView.backgroundColor = [UIColor lightOrange];
    self.contentView.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:ASSET_BY_SCREEN_HEIGHT(@"Background",@"Background-568h")]];

}


- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self addObservers];

    [self refreshAnimated:animated];
    
}


- (void)viewWillDisappear:(BOOL)animated {
    [super viewWillDisappear:animated];
    
    [self removeObservers];
}


#pragma mark - Data

- (void)loadProfileData
{
    [UserProfile query:@"my_profile" params:nil  async:^(NSArray * objects, NSError * error) {

        if ((error == nil) && (objects.count > 0)) {
            
            self.userProfile = (UserProfile *)[objects objectAtIndex:0]; //should only be one
            
        }
        else if(error){
            if(ERROR_CODE_401(error)) {
                AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication] delegate];
                [app showSessionTerminatedAlert];
            }
        }
    }];
}


#pragma mark - NSKeyValueObserving

- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context
{
    if (object == [AuthManager defaultManager] && [keyPath isEqualToString:@"currentCredentials"]) {
        [self refreshAnimated:!!self.view.window];
    }
    else {
        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];
    }

}


#pragma mark NSObject

- (void)dealloc {
    [self removeObservers];
}

@end
