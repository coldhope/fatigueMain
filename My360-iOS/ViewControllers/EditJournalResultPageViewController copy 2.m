//
//  EditJournalResultPageViewController.m
//  MSPatient
//
//  Generated by AnyPresence, Inc on 2013-03-02
//  Copyright (c) 2013. All rights reserved.
//
// Merge with Savio and Roberto edits.
// New edits 2014-03-04



#import <APSDK/AuthManager.h>
#import <APSDK/PatientJournal+Remote.h>
#import <APSDK/PatientJournal.h>
#import <APSDK/User.h>
#import <APSDK/PatientJournalQuestionnaire+Remote.h>
#import <APSDK/Symptom.h>
#import "AuthManager+Rules.h"
#import "EditJournalResultPageViewController.h"
#import "MBProgressHUD.h"
#import "UIViewController+UI.h"
#import "MultiSelectSymptomViewController.h"
#import "DCRoundSwitch.h"
#import "UIColor+APColorExtension.h"
#import "NSDate+APDateExtension.h"
#import <APSDK/APObject+Remote.h>
#import <APSDK/Setting+Remote.h>
#import "PikConstants.h"
#import <APSDK/APObject+RemoteRelationships.h>
#import "JournalListViewController.h"
#import "ConfigurationManager.h"
#import "QuestionnaireViewController.h"
#import "MissedTreatmentsReasonData.h"
#import "AdherenceListViewController.h"
#import "JournalReasonGlobalObject.h"
#import "EditGlucosePageViewController.h"
#import "BaseFormViewController.h"
#import <APSDK/PatientGlucose.h>
#import "PIKCommon.h"
//#import "JournalTreatmentLogsTableViewController.h"

@interface EditJournalResultPageViewController () <UIPickerViewDelegate, UIPickerViewDataSource /*, UIAlertViewDelegate*/>

@property (nonatomic, weak) IBOutlet UITextField * abilityIdTextField;
@property (nonatomic, weak) IBOutlet UITextField * dayRatingTextField;
@property (nonatomic, weak) IBOutlet UITextField * timeFrameTextField;
@property (nonatomic, weak) IBOutlet UITextField * dyskinesiaRatingTextField;

@property (nonatomic, weak) IBOutlet UITextField * painRatingTextField; // rvera added 3/26/14
@property (nonatomic, weak) IBOutlet UITextField * journalOnTextField; // date of journal
@property (nonatomic, weak) IBOutlet UITextField * moodIdTextField;
@property (nonatomic, weak) IBOutlet UITextField * symptomListTextField;
@property (nonatomic, strong, readonly) UIPickerView * inputDayRatingrPicker;
@property (nonatomic, strong, readonly) UIPickerView * inputTimeFramePicker;
@property (nonatomic, strong, readonly) UIPickerView * inputPainRatingrPicker;
@property (nonatomic, strong, readonly) UIPickerView * inputMoodPicker;
@property (nonatomic, strong, readonly) UIPickerView * inputAbilityPicker;
@property (nonatomic, strong, readonly) UIPickerView * inputDyskinesiaRatingPicker; //Added for PD copy from DayRating --rvera 10/21/14

@property (nonatomic, strong) DCRoundSwitch * medicationTakenTodaySwitch;
@property (nonatomic, strong) DCRoundSwitch * symptomTodaySwitch;
@property (nonatomic, strong) DCRoundSwitch * allergensTodaySwitch;
@property (nonatomic, strong) DCRoundSwitch * dyskinesiaTodaySwitch;
@property (nonatomic, strong) DCRoundSwitch * physicalActivityTodaySwitch;


//Diabetes app fields
@property (nonatomic, weak) IBOutlet UITextField *activityTextField;
@property (nonatomic, weak) IBOutlet UITextField *durationTextField;
@property (nonatomic, weak) IBOutlet UITextField *intensityTextField;
@property (nonatomic, weak) IBOutlet UITextField *diastolicTextField;
@property (nonatomic, weak) IBOutlet UITextField *systolicTextField;
@property (nonatomic, weak) IBOutlet UITextField *weightTextField;
@property (nonatomic, weak) IBOutlet UITextField *cholesteralTextField;
@property (nonatomic, weak) IBOutlet UIButton *questionnaireButton;
@property (nonatomic, strong) UIPickerView * inputActivityPicker;
@property (nonatomic, strong) UIPickerView * inputIntensityPicker;
@property (nonatomic, strong) NSArray *activityData;
@property (nonatomic, strong) NSArray *intensityData;
@property (nonatomic, strong) NSArray *missingTreatmentReasonData;

//Asthma New app fields
@property (nonatomic, weak) IBOutlet UITextField *peakFlowTextField;
@property (nonatomic, strong) UIPickerView * inputPeakFlowPicker;
@property (nonatomic, strong) NSArray *peakFlowData;

@property (nonatomic, weak) IBOutlet UITextField *allergensTodayTextField;
@property (nonatomic, strong) UIPickerView * inputAllergensTodayPicker;
@property (nonatomic, strong) NSArray *allergensTodayData;

@property (nonatomic, weak) IBOutlet UITextField *inhalerTextField;
@property (nonatomic, strong) UIPickerView * inputInhalerPicker;
@property (nonatomic, strong) NSArray *inhalerData;

@property (nonatomic, weak) IBOutlet UITextField *shortnessBreathTextField;
@property (nonatomic, strong) UIPickerView * inputShortnessBreathPicker;
@property (nonatomic, strong) NSArray *shortnessBreathData;

//Newly added to Asthma for the Spirometry Data
@property (nonatomic, weak) IBOutlet UITextField * fvcTextField;
@property (nonatomic, strong) UIPickerView * inputFvcPicker;
@property (nonatomic, strong) NSArray * fvcData;

@property (nonatomic, weak) IBOutlet UITextField * fvcPercentageTextField;
@property (nonatomic, strong) UIPickerView * inputFvcPercentagePicker;
@property (nonatomic, strong) NSArray * fvcPercentageData;

@property (nonatomic, weak) IBOutlet UITextField * fevTextField;
@property (nonatomic, strong) UIPickerView * inputFevPicker;
@property (nonatomic, strong) NSArray * fevData;

@property (nonatomic, weak) IBOutlet UITextField * fevPercentageTextField;
@property (nonatomic, strong) UIPickerView * inputFevPercentagePicker;
@property (nonatomic, strong) NSArray * fevPercentageData;

@property (nonatomic, weak) IBOutlet UITextField * fefTextField;
@property (nonatomic, strong) UIPickerView * inputFefPicker;
@property (nonatomic, strong) NSArray * fefData;

@property (nonatomic, weak) IBOutlet UITextField * fevFvcTextField;
@property (nonatomic, strong) UIPickerView * inputFevFvcPicker;
@property (nonatomic, strong) NSArray * fevFvcData;

@property (nonatomic, weak) IBOutlet UITextField *dyskinesiaDayPercentageTextField;
@property (nonatomic, strong) UIPickerView * inputDyskinesiaDayPercentagePicker;
@property (nonatomic, strong) NSArray *dyskinesiaDayPercentageData;

- (void)refresh;
@end

@implementation EditJournalResultPageViewController
@synthesize inputDayRatingrPicker = _inputDayRatingrPicker;
@synthesize inputTimeFramePicker = _inputTimeFramePicker;
@synthesize inputPainRatingrPicker = _inputPainRatingrPicker;
@synthesize inputDyskinesiaRatingPicker = _inputDyskinesiaRatingPicker;

@synthesize inputFvcPicker = _inputFvcPicker;
@synthesize inputFvcPercentagePicker = _inputFvcPercentagePicker;

@synthesize inputFevPicker = _inputFevPicker;
@synthesize inputFevPercentagePicker = _inputFevPercentagePicker;

@synthesize inputFefPicker = _inputFefPicker;
@synthesize inputFevFvcPicker= _inputFevFvcPicker;

@synthesize inputMoodPicker = _inputMoodPicker;
@synthesize inputAbilityPicker = _inputAbilityPicker;
@synthesize patientSymptomData;
@synthesize selectedSymptomData;
@synthesize selectedSymptomIds;
@synthesize mood = _mood;
@synthesize ability = _ability;
@synthesize dayRating;
@synthesize dayRatingData;
@synthesize timeFrame;
@synthesize timeFrameData;
@synthesize painRating;
@synthesize painRatingData;

@synthesize peakFlow;
@synthesize allergensToday;
@synthesize inhaler;
@synthesize shortnessBreath;

@synthesize fvc;
@synthesize fvcPercentage;
@synthesize fev;
@synthesize fevPercentage;
@synthesize fef;
@synthesize fevFvc;

@synthesize dyskinesiaRating;
@synthesize dyskinesiaRatingData;
@synthesize dyskinesiaDayPercentage;


#pragma mark - Public

- (IBAction)logsButtonTapped{
    NSLog(@"logsButtonTapped");
}

- (IBAction)buttonPressedMsg{
    UIAlertView *alertMsg = [[UIAlertView alloc]initWithTitle: nil // @"ALERT!"
                                                      message: @"“Please enter the highest value of three ratings.”"
                                                     delegate: nil
                                            cancelButtonTitle:@"OK"
                                            otherButtonTitles:nil];
    
    [alertMsg show];
    NSLog(@"Button Pressed Message Tapped");
    
}


- (void)setPatientJournal:(PatientJournal *)patientJournal {
    if (_patientJournal != patientJournal) {
        _patientJournal = patientJournal;
        
        if ([self isViewLoaded])
            [self refresh];
    }
}


- (UIToolbar *) getToolBar{
    
    
    UIButton* infoButton = [UIButton buttonWithType: UIButtonTypeInfoLight];
    [infoButton addTarget:self action:@selector(doneBarButtonItemTapped) forControlEvents:UIControlEventTouchDown];
    
    UIBarButtonItem* itemAboutUs =[[UIBarButtonItem alloc]initWithCustomView:infoButton];
    
    UIToolbar *toolBar= [[UIToolbar alloc] initWithFrame:CGRectMake(0,0,320,44)];
    [toolBar setBarStyle:UIBarStyleBlackOpaque];
    UIBarButtonItem *barButtonDone = [[UIBarButtonItem alloc] initWithTitle:@"Done"
                                                                      style:UIBarButtonItemStyleBordered target:self
                                      
                                                                     action:@selector(doneBarButtonItemTapped)
                                      ];
    
    barButtonDone.tintColor=[UIColor blueColor];
    UIBarButtonItem *flexible = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil];
    toolBar.items = [[NSArray alloc] initWithObjects:flexible, barButtonDone, itemAboutUs,nil];
    
    toolBar.barStyle = UIBarStyleBlack;
    toolBar.translucent = YES;
    return toolBar;
    
}


- (UIPickerView *)inputDayRatingrPicker {
    if (!_inputDayRatingrPicker) {
        _inputDayRatingrPicker = [[UIPickerView alloc] initWithFrame:CGRectZero];
        _inputDayRatingrPicker.delegate = self;
        _inputDayRatingrPicker.dataSource = self;
        _inputDayRatingrPicker.showsSelectionIndicator = YES;
        [_inputDayRatingrPicker sizeToFit];
    }
    
    return _inputDayRatingrPicker;
}

- (UIPickerView *)inputDyskinesiaRatingPicker {
    if (!_inputDyskinesiaRatingPicker) {
        _inputDyskinesiaRatingPicker = [[UIPickerView alloc] initWithFrame:CGRectZero];
        _inputDyskinesiaRatingPicker.delegate = self;
        _inputDyskinesiaRatingPicker.dataSource = self;
        _inputDyskinesiaRatingPicker.showsSelectionIndicator = YES;
        [_inputDyskinesiaRatingPicker sizeToFit];
    }
    
    return _inputDyskinesiaRatingPicker;
}


- (UIPickerView *)inputTimeFramePicker {
    if (!_inputTimeFramePicker) {
        _inputTimeFramePicker = [[UIPickerView alloc] initWithFrame:CGRectZero];
        _inputTimeFramePicker.delegate = self;
        _inputTimeFramePicker.dataSource = self;
        _inputTimeFramePicker.showsSelectionIndicator = YES;
        [_inputTimeFramePicker sizeToFit];
    }
    
    return _inputTimeFramePicker;
}

- (UIPickerView *)inputPainRatingrPicker {
    if (!_inputPainRatingrPicker) {
        _inputPainRatingrPicker = [[UIPickerView alloc] initWithFrame:CGRectZero];
        _inputPainRatingrPicker.delegate = self;
        _inputPainRatingrPicker.dataSource = self;
        _inputPainRatingrPicker.showsSelectionIndicator = YES;
        [_inputPainRatingrPicker sizeToFit];
    }
    
    return _inputPainRatingrPicker;
}



- (UIPickerView *)inputMoodPicker {
    if (!_inputMoodPicker) {
        _inputMoodPicker = [[UIPickerView alloc] initWithFrame:CGRectZero];
        
        _inputMoodPicker.delegate = self;
        _inputMoodPicker.dataSource = self;
        _inputMoodPicker.showsSelectionIndicator = YES;
        
        [_inputMoodPicker sizeToFit];
    }
    
    return _inputMoodPicker;
}


- (UIPickerView *)inputAbilityPicker {
    if (!_inputAbilityPicker) {
        _inputAbilityPicker = [[UIPickerView alloc] initWithFrame:CGRectZero];
        
        _inputAbilityPicker.delegate = self;
        _inputAbilityPicker.dataSource = self;
        _inputAbilityPicker.showsSelectionIndicator = YES;
        
        [_inputAbilityPicker sizeToFit];
    }
    
    return _inputAbilityPicker;
}



#pragma mark - Actions

-(BOOL)haveExistingJournal
{
    
    NSError *err = nil;
    NSDictionary *params = [[NSDictionary alloc]initWithObjects:[[NSArray alloc]initWithObjects:self.journalOnTextField.text,((User *)[AuthManager defaultManager].currentCredentials).id,nil] forKeys:[[NSArray alloc]initWithObjects:@"date",@"patient_id",nil]];
    NSArray *objects = [PatientJournal query:@"journal_date_match" params:params error:&err];
    if (err == nil) {
        if ([objects count] > 0) {
            
            return YES;
        }
    }
    
    return NO;
}


- (void)questionnaireButtonTapped:(id)sender
{
    if (self.editMode) {
        [self performSegueWithIdentifier:@"EditQuestionnaireSegue" sender:self];
    }
    else {
        [self performSegueWithIdentifier:@"NewQuestionnaireSegue" sender:self];
    }
}

//************* I M P O R T A N T   PLEASE READ BEFORE MODIFYING  ************************//
//                savedTapped4Logs and savedTapped
//   W   A   R   N   I  N  G
//  CHANGES MUST BE MADE TO
//  savedTapped4Logs and savedTapped
//  inorder for this VC to work successfully
// THIS CODE  IS DONE SYNCH
//*****************************************//

- (BOOL) savedTapped4Logs{
    BOOL isSuccessfulSave = NO;
    [self pushBusyOperation];
    if (self.editMode && self.somethingChanged) {
        
        self.patientJournal.ability = self.ability;
        self.patientJournal.dayRating = self.dayRating;
       // self.patientJournal.timeFrame = self.timeFrame;  //rvera - Added we need to add it to the API
        self.patientJournal.painRating = self.painRating;
        self.patientJournal.journalOn = [[self configureDateFormatter:self.dateFormatter field:self.journalOnTextField] dateFromString:self.journalOnTextField.text];
        self.patientJournal.medicationTakenToday = [NSNumber numberWithBool:self.medicationTakenTodaySwitch.on];
        
        self.patientJournal.mood = self.mood;
        self.patientJournal.symptomToday = [NSNumber numberWithBool:self.symptomTodaySwitch.on];
        self.patientJournal.symptomIds = self.selectedSymptomIds;
        
        if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
            || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
            || [[[ConfigurationManager sharedManager] appID] integerValue] == MS
            || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
            || [[[ConfigurationManager sharedManager] appID] integerValue] == RA
            || [[[ConfigurationManager sharedManager] appID] integerValue] == HepC
            || [[[ConfigurationManager sharedManager] appID] integerValue] == PD
            || [[[ConfigurationManager sharedManager] appID] integerValue] == IPF) {
            
                NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
                [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
                
                self.patientJournal.activity = self.activityTextField.text;
                self.patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
                self.patientJournal.activityIntensity = self.intensityTextField.text;
                self.patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
                self.patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
                self.patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
                self.patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
            
        }
        
        //Added fro Asthma --rvera 6/16/14
        else if ([[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
                 || [[[ConfigurationManager sharedManager] appID] integerValue] == AAPA) {
            
                NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
                [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
            
                self.patientJournal.activity = self.activityTextField.text;
                self.patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
                self.patientJournal.activityIntensity = self.intensityTextField.text;
                self.patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
                self.patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
                self.patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
                self.patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
            
                self.patientJournal.peakFlow = [numberFormatter numberFromString:self.peakFlowTextField.text];
               // self.patientJournal.allergensToday = [numberFormatter numberFromString:self.allergensTodayTextField.text];
                self.patientJournal.allergensToday = [NSNumber numberWithBool:self.allergensTodaySwitch.on];
                self.patientJournal.inhaler = [numberFormatter numberFromString:self.inhalerTextField.text];
                self.patientJournal.shortnessBreath = [numberFormatter numberFromString:self.shortnessBreathTextField.text];
            
                self.patientJournal.fvc = [numberFormatter numberFromString:self.fvcTextField.text];
                self.patientJournal.fvcPercentage = [numberFormatter numberFromString:self.fvcPercentageTextField.text];
                self.patientJournal.fev = [numberFormatter numberFromString:self.fevTextField.text];
                self.patientJournal.fevPercentage = [numberFormatter numberFromString:self.fevPercentageTextField.text];
                self.patientJournal.fef = [numberFormatter numberFromString:self.fefTextField.text];
                self.patientJournal.fevFvc = [numberFormatter numberFromString:self.fevFvcTextField.text];
        }

        
       /* if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes) {
            
            NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
            [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
            
            self.patientJournal.activity = self.activityTextField.text;
            self.patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
            self.patientJournal.activityIntensity = self.intensityTextField.text;
            self.patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
            self.patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
            self.patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
            self.patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
        }
        
        else if ([[[ConfigurationManager sharedManager] appID] integerValue] == MS) {
            
            NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
            [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
            
            self.patientJournal.activity = self.activityTextField.text;
            self.patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
            self.patientJournal.activityIntensity = self.intensityTextField.text;
            self.patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
            self.patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
            self.patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
            self.patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
        }
        else if ([[[ConfigurationManager sharedManager] appID] integerValue] == COPD) {
            
            NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
            [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
            
            self.patientJournal.activity = self.activityTextField.text;
            self.patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
            self.patientJournal.activityIntensity = self.intensityTextField.text;
            self.patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
            self.patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
            self.patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
            self.patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
        }
        else if ([[[ConfigurationManager sharedManager] appID] integerValue] == MM) {
            
            NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
            [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
            
            self.patientJournal.activity = self.activityTextField.text;
            self.patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
            self.patientJournal.activityIntensity = self.intensityTextField.text;
            self.patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
            self.patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
            self.patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
            self.patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
        }
        else if ([[[ConfigurationManager sharedManager] appID] integerValue] == RA) {
            
            NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
            [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
            
            self.patientJournal.activity = self.activityTextField.text;
            self.patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
            self.patientJournal.activityIntensity = self.intensityTextField.text;
            self.patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
            self.patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
            self.patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
            self.patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
        }
        
        else if ([[[ConfigurationManager sharedManager] appID] integerValue] == HepC) {
            
            NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
            [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
            
            self.patientJournal.activity = self.activityTextField.text;
            self.patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
            self.patientJournal.activityIntensity = self.intensityTextField.text;
            self.patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
            self.patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
            self.patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
            self.patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
        }
        else if ([[[ConfigurationManager sharedManager] appID] integerValue] == PD) {
            
            NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
            [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
            
            self.patientJournal.activity = self.activityTextField.text;
            self.patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
            self.patientJournal.activityIntensity = self.intensityTextField.text;
            self.patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
            self.patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
            self.patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
            self.patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
        }
*/

        
        
        // SAVE -SVAZ
        [self pushBusyOperation];
        NSError * error= nil;
        if ([self.patientJournal update:&error]){
            // success
            if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
                || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
                || [[[ConfigurationManager sharedManager] appID] integerValue] == MS
                || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
                || [[[ConfigurationManager sharedManager] appID] integerValue] == RA
                || [[[ConfigurationManager sharedManager] appID] integerValue] == HepC
                || [[[ConfigurationManager sharedManager] appID] integerValue] == PD
                || [[[ConfigurationManager sharedManager] appID] integerValue] == IPF
                || [[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
                || [[[ConfigurationManager sharedManager] appID] integerValue] == AAPA) {
                
                if (self.patientJournal.weight && self.userProfile.goalWeight && [self.patientJournal.weight intValue] < [self.userProfile.goalWeight intValue]) {
                    [self showMessage:@"Goal weight met. Set a new goal in Settings::My Profile."];
                    
                }
            }
            self.somethingChanged = NO; // svaz added for success
//            [self.navigationController popViewControllerAnimated:YES];
            isSuccessfulSave = YES;
            
            
            
            
        }else{
            if (error) {
                isSuccessfulSave=NO;
                if(ERROR_CODE_401(error)) {
                    AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication] delegate];
                    [app showSessionTerminatedAlert];
                    
                }
                else {
                    [self showMessage:@"Journal record failed to save."];
                }
            }
        }
        
    }
    
    
    else if (!self.editMode) {
        // NEW JOURNAL EVENT INSERTED - svaz
        
        if (self.journalOnTextField.text.length == 0) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A start day is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        else if (self.dayRatingTextField.text.length == 0) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A rating is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
//        else if (self.timeFrameTextField.text.length == 0) {
//            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A rating is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
//            [alert show];
//            
//        }
        else if (self.painRatingTextField.text.length == 0 && [[[ConfigurationManager sharedManager] appID] integerValue] == RA) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A pain rating is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        else if (self.moodIdTextField.text.length == 0 && ![[[ConfigurationManager sharedManager] appID] integerValue] == RA) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A mood is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        
        /*else if (self.abilityIdTextField.text.length == 0) {
         
         if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
         || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
         || [[[ConfigurationManager sharedManager] appID] integerValue] == MS
         || [[[ConfigurationManager sharedManager] appID] integerValue] == RA
         || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
         ) {
         
         // climb superview ladder until we find the container cell
         UIView* subView = (UIView*)self.abilityIdTextField.superview;
         while (subView && ![subView isKindOfClass:[UITableViewCell class]]) {
         subView = subView.superview;
         }
         if (subView.hidden != 1) { // check if cell is hidden
         UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A disability level is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
         [alert show];
         }
         }
         } */
        
        else if ([self haveExistingJournal]) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"You have already created a journal entry for this date." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        else {
            // NEW JOURNAL ENTRY - SAVE - SVAZ
            PatientJournal *patientJournal = [PatientJournal new];
            
            patientJournal.patientId = ((User *)[AuthManager defaultManager].currentCredentials).id;
            
            Ability *a = [Ability new];
            a.id = self.ability.id;
            a.inactive = self.ability.inactive;
            a.name = self.ability.name;
            a.summary = self.ability.summary;
            
            patientJournal.ability = a;
            patientJournal.dayRating = self.dayRating;
            //patientJournal.timeFrame = self.timeFrame;
            patientJournal.painRating = self.painRating;
            patientJournal.journalOn = [[self configureDateFormatter:self.dateFormatter field:self.journalOnTextField] dateFromString:self.journalOnTextField.text];
            patientJournal.medicationTakenToday = [NSNumber numberWithBool:self.medicationTakenTodaySwitch.on];
            Mood *m = [Mood new];
            m.id = self.mood.id;
            m.inactive = self.mood.inactive;
            m.name = self.mood.name;
            patientJournal.mood = m;
            patientJournal.symptomToday = [NSNumber numberWithBool:self.symptomTodaySwitch.on];
            patientJournal.symptomIds = self.selectedSymptomIds;
            
 
            //            #warning TODO - add reason and times for Missed Treatment
            
            if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
                || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
                || [[[ConfigurationManager sharedManager] appID] integerValue] == MS
                || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
                || [[[ConfigurationManager sharedManager] appID] integerValue] == RA
                || [[[ConfigurationManager sharedManager] appID] integerValue] == HepC
                || [[[ConfigurationManager sharedManager] appID] integerValue] == PD
                || [[[ConfigurationManager sharedManager] appID] integerValue] == IPF) {

                NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
                [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
                
                patientJournal.activity = self.activityTextField.text;
                patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
                patientJournal.activityIntensity = self.intensityTextField.text;
                patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
                patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
                patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
                patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
                
            }
            
            //Added fro Asthma --rvera 6/16/14
            else if ([[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
                     ||[[[ConfigurationManager sharedManager] appID] integerValue] == AAPA) {
                
                NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
                [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
                
                patientJournal.activity = self.activityTextField.text;
                patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
                patientJournal.activityIntensity = self.intensityTextField.text;
                patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
                patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
                patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
                patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
                
                
            
                patientJournal.peakFlow = [numberFormatter numberFromString:self.peakFlowTextField.text];
                //patientJournal.allergensToday = [numberFormatter numberFromString:self.allergensTodayTextField.text];
                patientJournal.allergensToday = [NSNumber numberWithBool:self.allergensTodaySwitch.on];
                patientJournal.inhaler = [numberFormatter numberFromString:self.inhalerTextField.text];
                patientJournal.shortnessBreath = [numberFormatter numberFromString:self.shortnessBreathTextField.text];
                
                patientJournal.fvc = [numberFormatter numberFromString:self.fvcTextField.text];
                patientJournal.fvcPercentage = [numberFormatter numberFromString:self.fvcPercentageTextField.text];
                patientJournal.fev = [numberFormatter numberFromString:self.fevTextField.text];
                patientJournal.fevPercentage = [numberFormatter numberFromString:self.fevPercentageTextField.text];
                 patientJournal.fef = [numberFormatter numberFromString:self.fefTextField.text];
                 patientJournal.fevFvc = [numberFormatter numberFromString:self.fevFvcTextField.text];
             }
            
            
            //save
            [self pushBusyOperation];
            NSError *error = nil;
            
            if ([patientJournal create:&error]) {
                //                success
                
                isSuccessfulSave=YES;  // SAVED EVERYTHING SUCCESSFUL
                
                /// ***** patientQuestionnaire *****
                if (self.patientQuestionnaire) {
                    //the user went into the questionnaire view
                    
                    self.patientQuestionnaire.patientJournalId = patientJournal.id;
                    self.patientQuestionnaire.applicationQuestionnaireId = [[ConfigurationManager sharedManager] appID];
                    
                    //  NSError *errorQ=nil;
                    
                    [self.patientQuestionnaire createAsync:^(id object, NSError *error) {
                        
                        if (error) {
                            NSLog(@"Error Creating Questionnaire");
                            self.somethingChanged = YES; // svaz added for failure
                            [self showMessage:@"Error Creating Questionnaire."];
                            
                        }
                        
                    }];

//                    if (![self.patientQuestionnaire create:&errorQ]) {
//                        NSLog(@"Error Creating Questionnaire");
//                        self.somethingChanged = YES; // svaz added for failure
//                        [self showMessage:@"Error Creating Questionnaire."];
//                        isSuccessfulSave=NO;
//                    }
                    self.somethingChanged = NO; // svaz added for success
                    
                    
                } else {
                    //every journal entry needs to have a current questionnaire
                    PatientJournalQuestionnaire *patientQuestionnaire = [PatientJournalQuestionnaire new];
                    patientQuestionnaire.patientJournalId = patientJournal.id;
                    patientQuestionnaire.applicationQuestionnaireId = [[ConfigurationManager sharedManager] appID];

//                    NSError *errorQ=nil;
                    [self.patientQuestionnaire createAsync:^(id object, NSError *error) {
                        
                        if (error) {
                            NSLog(@"Error Creating Questionnaire");
                            self.somethingChanged = YES; // svaz added for failure
                            [self showMessage:@"Error Creating Questionnaire."];
                            
                        }
                        
                    }];

//                    if (![self.patientQuestionnaire create:&errorQ]) {
//                        NSLog(@"Error Creating New  Questionnaire");
//                        self.somethingChanged = YES; // svaz added for failure
//                        [self showMessage:@"Error Creating Questionnaire."];
//                        isSuccessfulSave=NO;
//                    }
                    
                    self.somethingChanged = NO; // svaz added for success
                }
                
                if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == MS
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == RA
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == HepC
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == PD
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == IPF
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == AAPA) {
                    
                    if (patientJournal.weight && self.userProfile.goalWeight && [self.patientJournal.weight intValue] < [self.userProfile.goalWeight intValue]) {
                        [self showMessage:@"Goal weight met. Set a new goal in Settings::My Profile."];
                        
                    }
                    
                    [self dismissViewControllerAnimated:YES completion:nil];
                }
                else {
                    [self dismissViewControllerAnimated:YES completion:nil];
                }
                
                
            }else{
                //                failure
                
                [self popBusyOperation];
                if (error) {
                    isSuccessfulSave=NO;
                    if(ERROR_CODE_401(error)) {
                        AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication] delegate];
                        [app showSessionTerminatedAlert];
                    }
                    else {
                        [self showMessage:@"Journal record failed to save."];
                    }
                }
            }
        }
    }
    else {
//        [self.navigationController popViewControllerAnimated:YES];
        
    }
    [self popBusyOperation];

    return isSuccessfulSave;
}



//************* I M P O R T A N T   PLEASE READ BEFORE MODIFYING  ************************//
//                savedTapped4Logs and savedTapped
//                  W   A   R   N   I  N  G
//  CHANGES MUST BE MADE TO
//  savedTapped4Logs and savedTapped
//  inorder for this VC to work successfully


// THIS CODE  IS DONE ASYNCH
//*****************************************//



- (void)saveTapped {
    
    if (self.editMode && self.somethingChanged) {
        
        self.patientJournal.ability = self.ability;
        self.patientJournal.dayRating = self.dayRating;
        //self.patientJournal.timeFrame = self.timeFrame;
        self.patientJournal.painRating = self.painRating;
        self.patientJournal.journalOn = [[self configureDateFormatter:self.dateFormatter field:self.journalOnTextField] dateFromString:self.journalOnTextField.text];
        
        self.patientJournal.medicationTakenToday = [NSNumber numberWithBool:self.medicationTakenTodaySwitch.on];
        
        self.patientJournal.mood = self.mood;
        self.patientJournal.symptomToday = [NSNumber numberWithBool:self.symptomTodaySwitch.on];
        self.patientJournal.symptomIds = self.selectedSymptomIds;
        
        //#warning TODO - add reason and times for Missed Treatment
        
        if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
            || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
            || [[[ConfigurationManager sharedManager] appID] integerValue] == MS
            || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
            || [[[ConfigurationManager sharedManager] appID] integerValue] == RA
            || [[[ConfigurationManager sharedManager] appID] integerValue] == HepC
            || [[[ConfigurationManager sharedManager] appID] integerValue] == PD
            || [[[ConfigurationManager sharedManager] appID] integerValue] == IPF) {

                NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
                [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
                
                self.patientJournal.activity = self.activityTextField.text;
                self.patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
                self.patientJournal.activityIntensity = self.intensityTextField.text;
                self.patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
                self.patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
                self.patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
                self.patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
            
            }
        
            //Added fro Asthma --rvera 6/16/14
            else if ([[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
                     || [[[ConfigurationManager sharedManager] appID] integerValue] == AAPA) {
            
                NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
                [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
                
                self.patientJournal.activity = self.activityTextField.text;
                self.patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
                self.patientJournal.activityIntensity = self.intensityTextField.text;
                self.patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
                self.patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
                self.patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
                self.patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
           
                self.patientJournal.peakFlow = [numberFormatter numberFromString:self.peakFlowTextField.text];
               // self.patientJournal.allergensToday = [numberFormatter numberFromString:self.allergensTodayTextField.text];
                self.patientJournal.allergensToday = [NSNumber numberWithBool:self.allergensTodaySwitch.on];
                self.patientJournal.inhaler = [numberFormatter numberFromString:self.inhalerTextField.text];
                self.patientJournal.shortnessBreath = [numberFormatter numberFromString:self.shortnessBreathTextField.text];
                
                self.patientJournal.fvc = [numberFormatter numberFromString:self.fvcTextField.text];
                self.patientJournal.fvcPercentage = [numberFormatter numberFromString:self.fvcPercentageTextField.text];
                self.patientJournal.fev = [numberFormatter numberFromString:self.fevTextField.text];
                self.patientJournal.fevPercentage = [numberFormatter numberFromString:self.fevPercentageTextField.text];
                self.patientJournal.fef = [numberFormatter numberFromString:self.fefTextField.text];
                self.patientJournal.fevFvc = [numberFormatter numberFromString:self.fevFvcTextField.text];

                
        }
       
        
        
        // SAVE -SVAZ
        [self pushBusyOperation];
        
        [self.patientJournal updateAsync:^(id object, NSError *error) {
            
            [self popBusyOperation];
            
            if (error) {
                if(ERROR_CODE_401(error)) {
                    AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication] delegate];
                    [app showSessionTerminatedAlert];
                    
                }
                else {
                    [self showMessage:@"Journal record failed to save."];
                }
            }
            else {
                
                if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == MS
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == RA
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == HepC
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == PD
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == IPF
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == AAPA) {
                    
                    if (self.patientJournal.weight && self.userProfile.goalWeight && [self.patientJournal.weight intValue] < [self.userProfile.goalWeight intValue]) {
                        [self showMessage:@"Goal weight met. Set a new goal in Settings::My Profile."];
                        
                    }
                }
                self.somethingChanged = NO; // svaz added for success
                [self.navigationController popViewControllerAnimated:YES];
            }
            
        }];
    }
    else if (!self.editMode) {
        // NEW JOURNAL EVENT INSERTED - svaz
        
        if (self.journalOnTextField.text.length == 0) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A start day is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        else if (self.dayRatingTextField.text.length == 0) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A rating is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
//        else if (self.timeFrameTextField.text.length == 0) {
//            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A rating is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
//            [alert show];
//            
//        }
        else if (self.painRatingTextField.text.length == 0 && [[[ConfigurationManager sharedManager] appID] integerValue] == RA) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A pain rating is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        else if (self.moodIdTextField.text.length == 0 && ![[[ConfigurationManager sharedManager] appID] integerValue] == RA) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A mood is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        
        /*else if (self.abilityIdTextField.text.length == 0) {
         
         if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
         || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
         || [[[ConfigurationManager sharedManager] appID] integerValue] == MS
         || [[[ConfigurationManager sharedManager] appID] integerValue] == RA
         || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
         ) {
         
         // climb superview ladder until we find the container cell
         UIView* subView = (UIView*)self.abilityIdTextField.superview;
         while (subView && ![subView isKindOfClass:[UITableViewCell class]]) {
         subView = subView.superview;
         }
         if (subView.hidden != 1) { // check if cell is hidden
         UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A disability level is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
         [alert show];
         }
         }
         } */
        
        else if ([self haveExistingJournal]) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"You have already created a journal entry for this date." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        
//**************************************************************
//************* NEW JOURNAL ENTRY ********************
//**************************************************************
        
        else {
            // NEW JOURNAL ENTRY - SAVE - SVAZ
            PatientJournal *patientJournal = [PatientJournal new];
            
            patientJournal.patientId = ((User *)[AuthManager defaultManager].currentCredentials).id;
            
            Ability *a = [Ability new];
            a.id = self.ability.id;
            a.inactive = self.ability.inactive;
            a.name = self.ability.name;
            a.summary = self.ability.summary;
            
            patientJournal.ability = a;
            patientJournal.dayRating = self.dayRating;
           // patientJournal.timeFrame = self.timeFrame;
            patientJournal.painRating = self.painRating;
            patientJournal.journalOn = [[self configureDateFormatter:self.dateFormatter field:self.journalOnTextField] dateFromString:self.journalOnTextField.text];
            patientJournal.medicationTakenToday = [NSNumber numberWithBool:self.medicationTakenTodaySwitch.on];
           
            Mood *m = [Mood new];
            m.id = self.mood.id;
            m.inactive = self.mood.inactive;
            m.name = self.mood.name;
            patientJournal.mood = m;
            
            patientJournal.symptomToday = [NSNumber numberWithBool:self.symptomTodaySwitch.on];
            patientJournal.symptomIds = self.selectedSymptomIds;
            
            //            #warning TODO - add reason and times for Missed Treatment
            
            if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
                || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
                || [[[ConfigurationManager sharedManager] appID] integerValue] == MS
                || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
                || [[[ConfigurationManager sharedManager] appID] integerValue] == RA
                || [[[ConfigurationManager sharedManager] appID] integerValue] == HepC
                || [[[ConfigurationManager sharedManager] appID] integerValue] == PD
                || [[[ConfigurationManager sharedManager] appID] integerValue] == IPF) {

                    NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
                    [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
                    
                    patientJournal.activity = self.activityTextField.text;
                    patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
                    patientJournal.activityIntensity = self.intensityTextField.text;
                    patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
                    patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
                    patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
                    patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
            
                }
          
            //Added fro Asthma --rvera 6/16/14
            else if ([[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
                     || [[[ConfigurationManager sharedManager] appID] integerValue] == AAPA) {
                
                NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
                [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
                
                patientJournal.activity = self.activityTextField.text;
                patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
                patientJournal.activityIntensity = self.intensityTextField.text;
                patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
                patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
                patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
                patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
           
                NSLog(@"PeakFlow = %@",self.peakFlowTextField.text);
                NSLog(@"allergensTodayTextField = %@",self.allergensTodayTextField.text);
                NSLog(@"inhalerTextField = %@",self.inhalerTextField.text);
                NSLog(@"shortnessBreathTextField = %@",self.shortnessBreathTextField.text);
                
                 NSLog(@"FVC = %@",self.fvcTextField.text);
                NSLog(@"FVC Percentage = %@",self.fvcPercentageTextField.text);
                NSLog(@"FEV1 = %@",self.fevTextField.text);
                NSLog(@"FEV1 Percentage = %@",self.fevPercentageTextField.text);
                NSLog(@"FEF = %@",self.fefTextField.text);
                NSLog(@"FEV1/FVC = %@",self.fevFvcTextField.text);
                
                patientJournal.peakFlow = [numberFormatter numberFromString:self.peakFlowTextField.text];
                patientJournal.allergensToday = [NSNumber numberWithBool:self.allergensTodaySwitch.on];
                patientJournal.inhaler = [numberFormatter numberFromString:self.inhalerTextField.text];
                patientJournal.shortnessBreath = [numberFormatter numberFromString:self.shortnessBreathTextField.text];
                
                //patientJournal.fvc = [numberFormatter numberFromString:self.fvcTextField.text];
                patientJournal.fvc = [numberFormatter numberFromString:self.fvcTextField.text];
                patientJournal.fvcPercentage = [numberFormatter numberFromString:self.fvcPercentageTextField.text];
                patientJournal.fev = [numberFormatter numberFromString:self.fevTextField.text];
                patientJournal.fevPercentage = [numberFormatter numberFromString:self.fevPercentageTextField.text];
                patientJournal.fef = [numberFormatter numberFromString:self.fefTextField.text];
                patientJournal.fevFvc = [numberFormatter numberFromString:self.fevFvcTextField.text];

            }
            

            
            
            //save
            [self pushBusyOperation];
            
            [patientJournal createAsync:^(id obj, NSError *error) {
                
                [self popBusyOperation];
                if (error) {
                    if(ERROR_CODE_401(error)) {
                        AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication] delegate];
                        [app showSessionTerminatedAlert];
                    }
                    else {
                        [self showMessage:@"Journal record failed to save."];
                    }
                }
                else {
                    if (self.patientQuestionnaire) {
                        //the user went into the questionnaire view
                        
                        self.patientQuestionnaire.patientJournalId = patientJournal.id;
                        self.patientQuestionnaire.applicationQuestionnaireId = [[ConfigurationManager sharedManager] appID];
                        
                        [self.patientQuestionnaire createAsync:^(id object, NSError *error) {
                            
                            if (error) {
                                NSLog(@"Error Creating Questionnaire");
                                self.somethingChanged = YES; // svaz added for failure
                                [self showMessage:@"Error Creating Questionnaire."];
                                
                            }
                            
                        }];
                    }
                    else {
                        //every journal entry needs to have a current questionnaire
                        PatientJournalQuestionnaire *patientQuestionnaire = [PatientJournalQuestionnaire new];
                        patientQuestionnaire.patientJournalId = patientJournal.id;
                        patientQuestionnaire.applicationQuestionnaireId = [[ConfigurationManager sharedManager] appID];
                        
                        [patientQuestionnaire createAsync:^(id object, NSError *error) {
                            
                            if (error) {
                                NSLog(@"Error Creating Questionnaire");
                                self.somethingChanged = YES; // svaz added for failure
                                [self showMessage:@"Error Creating Questionnaire."];
                                
                            }
                            
                        }];
                        self.somethingChanged = NO; // svaz added for success
                    }
                    
                    
                    if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
                        || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
                        || [[[ConfigurationManager sharedManager] appID] integerValue] == MS
                        || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
                        || [[[ConfigurationManager sharedManager] appID] integerValue] == RA
                        || [[[ConfigurationManager sharedManager] appID] integerValue] == HepC
                        || [[[ConfigurationManager sharedManager] appID] integerValue] == PD
                        || [[[ConfigurationManager sharedManager] appID] integerValue] == IPF
                        || [[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
                        || [[[ConfigurationManager sharedManager] appID] integerValue] == AAPA) {
                        
                        if (patientJournal.weight && self.userProfile.goalWeight && [self.patientJournal.weight intValue] < [self.userProfile.goalWeight intValue]) {
                            [self showMessage:@"Goal weight met. Set a new goal in Settings::My Profile."];
                            
                        }
                        
                        [self dismissViewControllerAnimated:YES completion:nil];
                    }
                    else {
                        [self dismissViewControllerAnimated:YES completion:nil];
                    }
                }
            }];
        }
    }
    else {
        [self.navigationController popViewControllerAnimated:YES];
        
    }
}



#pragma mark - Data
- (void)refresh {
    AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
    for (Mood *mood in ad.moodData) {
        if ([mood.id intValue] == [self.patientJournal.moodId intValue]) {
            self.mood = mood;
            break;
        }
    }
    
    for (Ability *ability in ad.abilityData) {
        if ([ability.id intValue] == [self.patientJournal.abilityId intValue]) {
            self.ability = ability;
            break;
        }
    }
    self.selectedSymptomData = [[NSMutableArray alloc] init];
    NSString *symptomsLabel = @"";
    //loop through the list of selected symptom ID's
    for (NSString *symptomID in self.patientSymptomData) {
        
        //loop through the list of symptoms
        for (Symptom *symptom in ad.symptomData) {
            
            //if there is a match add it to the list
            if ([symptom.id intValue] == [symptomID intValue]) {
                [self.selectedSymptomData addObject:symptom];
                symptomsLabel = [symptomsLabel stringByAppendingString:symptom.name];
                symptomsLabel = [symptomsLabel stringByAppendingString:@", "];
                break;
            }
        }
    }
    
    ///
    if (symptomsLabel.length > 2) {
        symptomsLabel = [symptomsLabel substringToIndex:[symptomsLabel length] - 2];
        self.symptomListTextField.text = symptomsLabel;
        
    }
    
    self.journalOnTextField.text = [[self configureDateFormatter:[self dateFormatterWithTimeZone:[NSTimeZone timeZoneWithAbbreviation:@"UTC"]] field:self.journalOnTextField] stringFromDate:self.patientJournal.journalOn];
    self.dayRatingTextField.text = [self.patientJournal.dayRating description];
    //self.timeFrameTextField.text = [self.patientJournal.timeFrame description];
    self.painRatingTextField.text = [self.patientJournal.painRating description];
    self.symptomTodaySwitch.on = [self.patientJournal.symptomToday boolValue];
    self.medicationTakenTodaySwitch.on = [self.patientJournal.medicationTakenToday boolValue];
    self.moodIdTextField.text = self.mood.name;
    self.abilityIdTextField.text = self.ability.name;
    self.dayRating = self.patientJournal.dayRating;
    //self.timeFrame = self.patientJournal.timeFrame;
    self.painRating = self.patientJournal.painRating;
    
    
    if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
        || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
        || [[[ConfigurationManager sharedManager] appID] integerValue] == MS
        || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
        || [[[ConfigurationManager sharedManager] appID] integerValue] == RA
        || [[[ConfigurationManager sharedManager] appID] integerValue] == HepC
        || [[[ConfigurationManager sharedManager] appID] integerValue] == PD
        || [[[ConfigurationManager sharedManager] appID] integerValue] == IPF) {
        
            self.activityTextField.text = self.patientJournal.activity;
            self.durationTextField.text = [self.patientJournal.duration stringValue];
            self.intensityTextField.text = self.patientJournal.activityIntensity;
            self.diastolicTextField.text = [self.patientJournal.bpDiastolic stringValue];
            self.systolicTextField.text = [self.patientJournal.bpSystolic stringValue];
            self.cholesteralTextField.text = [self.patientJournal.cholesterol stringValue];
            self.weightTextField.text = [self.patientJournal.weight stringValue];
        }
    
        //Added fro Asthma --rvera 6/16/14
        else  if ([[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
                  || [[[ConfigurationManager sharedManager] appID] integerValue] == AAPA) {
        
            self.activityTextField.text = self.patientJournal.activity;
            self.durationTextField.text = [self.patientJournal.duration stringValue];
            self.intensityTextField.text = self.patientJournal.activityIntensity;
            self.diastolicTextField.text = [self.patientJournal.bpDiastolic stringValue];
            self.systolicTextField.text = [self.patientJournal.bpSystolic stringValue];
            self.cholesteralTextField.text = [self.patientJournal.cholesterol stringValue];
            self.weightTextField.text = [self.patientJournal.weight stringValue];
        
            self.peakFlowTextField.text = [self.patientJournal.peakFlow stringValue];
            //self.allergensTodayTextField.text = [self.patientJournal.allergensToday stringValue];
            self.allergensTodaySwitch.on = [self.patientJournal.allergensToday boolValue];
            self.inhalerTextField.text = [self.patientJournal.inhaler stringValue];
            self.shortnessBreathTextField.text = [self.patientJournal.shortnessBreath stringValue];
            
            self.fvcTextField.text = [self.patientJournal.fvc stringValue];
            self.fvcPercentageTextField.text = [self.patientJournal.fvcPercentage stringValue];
            self.fevTextField.text = [self.patientJournal.fev stringValue];
            self.fevPercentageTextField.text = [self.patientJournal.fevPercentage stringValue];
            self.fefTextField.text = [self.patientJournal.fef stringValue];
            self.fevFvcTextField.text = [self.patientJournal.fevFvc stringValue];
    }
    
}

- (void)loadProfileData
{
    [UserProfile query:@"my_profile" params:nil  async:^(NSArray * objects, NSError * error) {
        
        if (error) {
            if(ERROR_CODE_401(error)) {
                AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication] delegate];
                [app showSessionTerminatedAlert];
            }
            else {
                [self showMessage:[error localizedDescription] ? : @"Error"];
            }
        }
        else if (objects.count > 0) {
            
            self.userProfile = [objects objectAtIndex:0];
        }
    }];
}


#pragma mark - UITextFieldDelegate

- (BOOL)  textFieldShouldBeginEditing:(UITextField *)textField {
    
    [self.delegate userInteractedWithViewController:self];
    self.somethingChanged = YES;
    
    if (textField.tag == kFormViewControllerFieldDate) {
        if (textField.text.length > 0) {
            NSDateFormatter * formatter = [self configureDateFormatter:self.dateFormatter field:textField];
            self.inputViewDatePicker.date = [formatter dateFromString:textField.text];
        }
        else {
            NSDateFormatter * formatter = [self configureDateFormatter:self.dateFormatter field:textField];
            textField.text = [formatter stringFromDate:self.inputViewDatePicker.date];
        }
        
        self.inputViewDatePicker.datePickerMode = UIDatePickerModeDate;
    }
    
    if (textField == self.dayRatingTextField) {
        if (textField.text.length > 0) {
            
            [self.inputDayRatingrPicker selectRow:[self.dayRating intValue] inComponent:0 animated:YES];
        }
        else {
            self.dayRating = [NSNumber numberWithInt:0];
            textField.text = @"0";
        }
    }
    
    if (textField == self.timeFrameTextField) {
        if (textField.text.length > 0) {
            
            [self.inputTimeFramePicker selectRow:[self.timeFrame intValue] inComponent:0 animated:YES];
        }
        else {
            self.timeFrame = [NSNumber numberWithInt:0];
            textField.text = @"0";
        }
    }
    
    if (textField == self.painRatingTextField) {
        if (textField.text.length > 0) {
            
            [self.inputPainRatingrPicker selectRow:[self.painRating intValue] inComponent:0 animated:YES];
        }
        else {
            self.painRating = [NSNumber numberWithInt:0];
            textField.text = @"0";
        }
    }
    
    if (textField == self.moodIdTextField) {
        if (textField.text.length > 0) {
            AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
            NSInteger row = [ad.moodData indexOfObject:self.mood];
            [self.inputMoodPicker selectRow:row inComponent:0 animated:YES];
        }
        else {
            AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
            self.mood = [ad.moodData objectAtIndex:0];
            textField.text = self.mood.name;
        }
    }
    
    
    if (textField == self.abilityIdTextField) {
        if (textField.text.length > 0) {
            AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
            NSInteger row = [ad.abilityData indexOfObject:self.ability];
            [self.inputAbilityPicker selectRow:row inComponent:0 animated:YES];
        }
        else {
            AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
            self.ability = [ad.abilityData objectAtIndex:0];
            textField.text = self.ability.name;
        }
    }
    
    //Added for peakFlow alert for Asthma --rvera 7-11-14
    if (textField == self.peakFlowTextField) {
        
        [self buttonPressedMsg];
        
    }
    
    
    if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
        || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
        || [[[ConfigurationManager sharedManager] appID] integerValue] == MS
        || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
        || [[[ConfigurationManager sharedManager] appID] integerValue] == RA
        || [[[ConfigurationManager sharedManager] appID] integerValue] == HepC
        || [[[ConfigurationManager sharedManager] appID] integerValue] == PD
        || [[[ConfigurationManager sharedManager] appID] integerValue] == IPF
        || [[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
        || [[[ConfigurationManager sharedManager] appID] integerValue] == AAPA) {
        
        if (textField == self.activityTextField) {
            if (textField.text.length > 0) {
                
                NSInteger row = [self.activityData indexOfObject:self.activityTextField.text];
                
                [self.inputActivityPicker selectRow:row inComponent:0 animated:YES];
            }
            else {
                self.activityTextField.text = [self.activityData objectAtIndex:0];
            }
        }
        else if (textField == self.intensityTextField) {
            if (textField.text.length > 0) {
                
                NSInteger row = [self.intensityData indexOfObject:self.intensityTextField.text];
                
                [self.inputIntensityPicker selectRow:row inComponent:0 animated:YES];
            }
            else {
                self.intensityTextField.text = [self.intensityData objectAtIndex:0];
            }
        }
        
        //Added for ASTHMA --rvera 6/16/14
        else if (textField == self.peakFlowTextField) {
            if (textField.text.length > 0) {
                
                NSInteger row = [self.peakFlowData indexOfObject:self.peakFlowTextField.text];
                
                [self.inputPeakFlowPicker selectRow:row inComponent:0 animated:YES];
            }
            else {
                self.peakFlowTextField.text = [self.peakFlowData objectAtIndex:0];
            }
        }
        //fvc and fvc %
        
        else if (textField == self.fvcTextField) {
            if (textField.text.length > 0) {
                
                NSInteger row = [self.fvcData indexOfObject:self.fvcTextField.text];
                
                [self.inputFvcPicker selectRow:row inComponent:0 animated:YES];
            }
            else {
                self.fvcTextField.text = [self.fvcData objectAtIndex:0];
            }
        }
        //fvc%
        else if (textField == self.fvcPercentageTextField) {
            if (textField.text.length > 0) {
                
                NSInteger row = [self.fvcPercentageData indexOfObject:self.fvcPercentageTextField.text];
                
                [self.inputFvcPercentagePicker selectRow:row inComponent:0 animated:YES];
            }
            else {
                self.fvcPercentageTextField.text = [self.fvcPercentageData objectAtIndex:0];
            }
        }
//FEV
        else if (textField == self.fevTextField) {
            if (textField.text.length > 0) {
                
                NSInteger row = [self.fevData indexOfObject:self.fevTextField.text];
                
                [self.inputFevPicker selectRow:row inComponent:0 animated:YES];
            }
            else {
                self.fevTextField.text = [self.fevData objectAtIndex:0];
            }
        }
//FEV%
        else if (textField == self.fevPercentageTextField) {
            if (textField.text.length > 0) {
                
                NSInteger row = [self.fevPercentageData indexOfObject:self.fevPercentageTextField.text];
                
                [self.inputFevPercentagePicker selectRow:row inComponent:0 animated:YES];
            }
            else {
                self.fevPercentageTextField.text = [self.fevPercentageData objectAtIndex:0];
            }
        }
//FEF
        else if (textField == self.fefTextField) {
            if (textField.text.length > 0) {
                
                NSInteger row = [self.fefData indexOfObject:self.fefTextField.text];
                
                [self.inputFefPicker selectRow:row inComponent:0 animated:YES];
            }
            else {
                self.fefTextField.text = [self.fefData objectAtIndex:0];
            }
        }
//FEV/FVC
        else if (textField == self.fevFvcTextField) {
            if (textField.text.length > 0) {
                
                NSInteger row = [self.fevFvcData indexOfObject:self.fevFvcTextField.text];
                
                [self.inputFevFvcPicker selectRow:row inComponent:0 animated:YES];
            }
            else {
                self.fevFvcTextField.text = [self.fevFvcData objectAtIndex:0];
            }
        }


        
        
        //#2
//        else if (textField == self.allergensTodayTextField) {
//            if (textField.text.length > 0) {
//                
//                NSInteger row = [self.allergensTodayData indexOfObject:self.allergensTodayTextField.text];
//                
//                [self.inputAllergensTodayPicker selectRow:row inComponent:0 animated:YES];
//            }
//            else {
//                self.allergensTodayTextField.text = [self.allergensTodayData objectAtIndex:0];
//            }
//        }
           //#3
        else if (textField == self.inhalerTextField) {
            if (textField.text.length > 0) {
                
                NSInteger row = [self.inhalerData indexOfObject:self.inhalerTextField.text];
                
                [self.inputInhalerPicker selectRow:row inComponent:0 animated:YES];
            }
            else {
                //    commented per trello showstopper        - svaz 9/24/14
//                self.inhalerTextField.text = [self.inhalerData objectAtIndex:0];
            }
        }
        //#4
        else if (textField == self.shortnessBreathTextField) {
            if (textField.text.length > 0) {
                
                NSInteger row = [self.shortnessBreathData indexOfObject:self.shortnessBreathTextField.text];
                
                [self.inputShortnessBreathPicker selectRow:row inComponent:0 animated:YES];
            }
            else {
                //    commented per trello showstopper        - svaz 9/24/14
//                self.shortnessBreathTextField.text = [self.shortnessBreathData objectAtIndex:0];
            }
        }


    } //End of the if

    return YES;
}




#pragma mark - PickerView delegate

-(NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView
{
    return 1;
}


-(NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component
{
    NSInteger numberOfRows = 0;
    
    if (pickerView == self.inputMoodPicker) {
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        numberOfRows = ad.moodData.count;
    }
    else if (pickerView == self.inputAbilityPicker){
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        numberOfRows = ad.abilityData.count;
        
    }
    else if (pickerView == self.inputDayRatingrPicker){
        numberOfRows = self.dayRatingData.count;
        
    }
    else if (pickerView == self.inputTimeFramePicker){
        numberOfRows = self.timeFrameData.count;
        
    }
    else if (pickerView == self.inputPainRatingrPicker){
        numberOfRows = self.painRatingData.count;
        
    }
    else if (pickerView == self.inputActivityPicker) {
        numberOfRows = self.activityData.count;
    }
    else if (pickerView == self.inputIntensityPicker) {
        numberOfRows = self.intensityData.count;
    }
    //Added for Asthma --rvera 6/16/14
    else if (pickerView == self.inputPeakFlowPicker) {
        numberOfRows = self.peakFlowData.count;
    }
//    else if (pickerView == self.inputAllergensTodayPicker) {
//        numberOfRows = self.allergensTodayData.count;
//    }
    else if (pickerView == self.inputInhalerPicker) {
        numberOfRows = self.inhalerData.count;
    }
    else if (pickerView == self.inputShortnessBreathPicker) {
        numberOfRows = self.shortnessBreathData.count;
    }
//FVC and FVC%
    else if (pickerView == self.inputFvcPicker) {
        numberOfRows = self.fvcData.count;
    }
    else if (pickerView == self.inputFvcPercentagePicker) {
        numberOfRows = self.fvcPercentageData.count;
    }
    else if (pickerView == self.inputFevPicker) {
        numberOfRows = self.fevData.count;
    }
    else if (pickerView == self.inputFevPercentagePicker) {
        numberOfRows = self.fevPercentageData.count;
    }
    else if (pickerView == self.inputFefPicker) {
        numberOfRows = self.fefData.count;
    }
    else if (pickerView == self.inputFevFvcPicker) {
        numberOfRows = self.fevFvcData.count;
    }
    
    
    return numberOfRows;
}


-(NSString*)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component
{
    
    NSString * title;
    
    if (pickerView == self.inputMoodPicker) {
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        Mood *mood = [ad.moodData objectAtIndex:row];
        title = mood.name;
        
    }
    else if (pickerView == self.inputAbilityPicker){
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        Ability *ability = [ad.abilityData objectAtIndex:row];
        title = ability.name;
        
    }
    else if (pickerView == self.inputDayRatingrPicker){
        title = [self.dayRatingData objectAtIndex:row];
        
    }
    else if (pickerView == self.inputTimeFramePicker){
        title = [self.timeFrameData objectAtIndex:row];
        
    }
    else if (pickerView == self.inputPainRatingrPicker){
        title = [self.painRatingData objectAtIndex:row];
        
    }
    else if (pickerView == self.inputActivityPicker) {
        title = [self.activityData objectAtIndex:row];
    }
    else if (pickerView == self.inputIntensityPicker) {
        title = [self.intensityData objectAtIndex:row];
    }
    //Added for Asthma --rvera 6/16/14
    else if (pickerView == self.inputPeakFlowPicker) {
         title = [self.peakFlowData objectAtIndex:row];
    }
//    else if (pickerView == self.inputAllergensTodayPicker) {
//        title = [self.allergensTodayData objectAtIndex:row];
//    }
    else if (pickerView == self.inputInhalerPicker) {
         title = [self.inhalerData objectAtIndex:row];
    }
    else if (pickerView == self.inputShortnessBreathPicker) {
         title = [self.shortnessBreathData objectAtIndex:row];
    }
// FVC and FVC%
    else if (pickerView == self.inputFvcPicker) {
        title = [self.fvcData objectAtIndex:row];
    }
    else if (pickerView == self.inputFvcPercentagePicker) {
        title = [self.fvcPercentageData objectAtIndex:row];
    }
    else if (pickerView == self.inputFevPicker) {
        title = [self.fevData objectAtIndex:row];
    }
    else if (pickerView == self.inputFevPercentagePicker) {
        title = [self.fevPercentageData objectAtIndex:row];
    }
    else if (pickerView == self.inputFefPicker) {
        title = [self.fefData objectAtIndex:row];
    }
    else if (pickerView == self.inputFevFvcPicker) {
        title = [self.fevFvcData objectAtIndex:row];
    }

     return title;
}

- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component
{
    
    if (pickerView == self.inputMoodPicker) {
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        self.mood = [ad.moodData objectAtIndex:row];
        self.moodIdTextField.text = self.mood.name;
        
    }
    else if (pickerView == self.inputAbilityPicker){
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        self.ability = [ad.abilityData objectAtIndex:row];
        self.abilityIdTextField.text = self.ability.name;
        
    }
    else if (pickerView == self.inputDayRatingrPicker){
        self.dayRating = [NSNumber numberWithInt:row];
        self.dayRatingTextField.text = [NSString stringWithFormat:@"%i", row];
        
    }
    else if (pickerView == self.inputTimeFramePicker){
        self.timeFrame = [NSNumber numberWithInt:row];
        self.timeFrameTextField.text = [NSString stringWithFormat:@"%i", row];
        
    }
    else if (pickerView == self.inputPainRatingrPicker){
        self.painRating = [NSNumber numberWithInt:row];
        self.painRatingTextField.text = [NSString stringWithFormat:@"%i", row];
        
    }
    else if (pickerView == self.inputActivityPicker) {
        self.activityTextField.text = [self.activityData objectAtIndex:row];
    }
    else if (pickerView == self.inputIntensityPicker) {
        self.intensityTextField.text = [self.intensityData objectAtIndex:row];
    }
    //Added for Asthma --rvera 6/16/14
    else if (pickerView == self.inputPeakFlowPicker) {
        self.peakFlowTextField.text = [self.peakFlowData objectAtIndex:row];
    }
//    else if (pickerView == self.inputAllergensTodayPicker) {
//        self.allergensTodayTextField.text = [self.allergensTodayData objectAtIndex:row];
//    }
    else if (pickerView == self.inputInhalerPicker) {
        self.inhalerTextField.text = [self.inhalerData objectAtIndex:row];
    }
    else if (pickerView == self.inputShortnessBreathPicker) {
        self.shortnessBreathTextField.text = [self.shortnessBreathData objectAtIndex:row];
    }
    
//fvc and fvc%
    else if (pickerView == self.inputFvcPicker) {
        self.fvcTextField.text = [self.fvcData objectAtIndex:row];
    }
    else if (pickerView == self.inputFvcPercentagePicker) {
        self.fvcPercentageTextField.text = [self.fvcPercentageData objectAtIndex:row];
    }
    else if (pickerView == self.inputFevPicker) {
        self.fevTextField.text = [self.fevData objectAtIndex:row];
    }
    else if (pickerView == self.inputFevPercentagePicker) {
        self.fevPercentageTextField.text = [self.fevPercentageData objectAtIndex:row];
    }
    else if (pickerView == self.inputFefPicker) {
        self.fefTextField.text = [self.fefData objectAtIndex:row];
    }
    else if (pickerView == self.inputFevFvcPicker) {
        self.fevFvcTextField.text = [self.fevFvcData objectAtIndex:row];
    }
    
    [self.delegate userInteractedWithViewController:self];
    self.somethingChanged = YES;
}


-(void)showAbilityInfo:(id)sender {
    UIButton *btn = (UIButton *)sender;
    AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
    UIAlertView *alert = [[UIAlertView alloc]
                          initWithTitle:[[ad.abilityData objectAtIndex:btn.tag] name]
                          message:[[ad.abilityData objectAtIndex:btn.tag] summary]
                          delegate:nil
                          cancelButtonTitle:@"Ok"
                          otherButtonTitles:nil];
    [alert show];
}




#pragma mark - Notification Center
- (void)questionnaireCompleted:(NSNotification *) notification
{
    if ([[notification name] isEqualToString:@"questionnaireCompleted"]){
        
        NSDictionary *userInfo = notification.userInfo;
        
        self.patientQuestionnaire = [userInfo objectForKey:@"questionnaire"];
        
        [[NSNotificationCenter defaultCenter] removeObserver:self name:@"questionnaireCompleted" object:nil];
        
    }
}


- (void)symptomsSelected:(NSNotification *) notification
{
    [self.delegate userInteractedWithViewController:self];
    self.somethingChanged = YES;
    
    if ([[notification name] isEqualToString:@"selectedSymptomList"]){
        
        
        NSDictionary *userInfo = notification.userInfo;
        
        self.selectedSymptomData = [userInfo objectForKey:@"symptomList"];
        
        
        NSString *labelText = @"";
        self.selectedSymptomIds = @"";
        
        for (Symptom *obj in self.selectedSymptomData) {
            labelText = [labelText stringByAppendingString:obj.name];
            labelText = [labelText stringByAppendingString:@", "];
            
            //the ids are sent when the user saves
            self.selectedSymptomIds = [self.selectedSymptomIds stringByAppendingString:[obj.id stringValue]];
            self.selectedSymptomIds = [self.selectedSymptomIds stringByAppendingString:@", "];
            
        }
        
        
        if (self.selectedSymptomIds.length > 2) {
            //trim off the traing comma and space
            labelText = [labelText substringToIndex:[labelText length] - 2];
            self.selectedSymptomIds = [self.selectedSymptomIds substringToIndex:[self.selectedSymptomIds length] - 2];
            
        }
        
        self.symptomListTextField.text = labelText;
        
        [self.tableView reloadData];
        
    }
}


#pragma mark - UIViewController


- (BOOL)shouldPerformSegueWithIdentifier:(NSString *)identifier sender:(id)sender {
    
    if ([self.journalOnTextField.text isEqualToString:@""]  || self.journalOnTextField.text  == nil) {
        NSLog(@"No date so return");
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Date Missing"
                                                        message:@"Please enter Log date"
                                                       delegate:self
                                              cancelButtonTitle:@"OK"
                                              otherButtonTitles:nil];
        [alert show];
        return NO;
    }
    
    if  ([identifier isEqualToString:@"TreatmentLogs"]) {
        __block BOOL isSaved=NO;
 
        if (self.somethingChanged  ) {
            
                if([self savedTapped4Logs]){
                    isSaved= YES;
                    self.somethingChanged =NO;
                    
                }
 
           return isSaved  ;
        }
    }
    return  YES;
    
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    
    if ([segue.identifier isEqualToString:@"SymptomsSegue"])
    {
        NSDictionary *params = [[NSDictionary alloc]initWithObjects:[NSArray arrayWithObjects:[[ConfigurationManager sharedManager] appID], nil] forKeys:[NSArray arrayWithObjects:@"app_id", nil]];
        [Setting exactMatchWithParams:params offset:0 limit:10 async:^(NSArray *objects, NSError *error) {
            Setting *globals;
            //rvera             for (Setting *stg in objects)
            if (!error) {
                if ([objects count] > 0) {
                    globals = [objects objectAtIndex:0]; // there should only be one
                    UIAlertView *alert = [[UIAlertView alloc]init];
                    alert.title = @"Warning!";
                    alert.message = globals.severeSymptomMsg;
                    [alert addButtonWithTitle:@"OK"];
                    [alert setCancelButtonIndex:0];
                    [alert setTag:1];
                    [alert show];
                }
            }
        }];
        ((MultiSelectSymptomViewController *)segue.destinationViewController).selectedTableData = self.selectedSymptomData;
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        ((MultiSelectSymptomViewController *)segue.destinationViewController).tableData = ad.symptomData;
    
    }
    else if ([segue.identifier isEqualToString:@"NewQuestionnaireSegue"]) {
        
        ((QuestionnaireViewController *)segue.destinationViewController).patientJournal = self.patientJournal;
        ((QuestionnaireViewController *)segue.destinationViewController).editMode = NO;
        ((QuestionnaireViewController *)segue.destinationViewController).patientQuestionnaire = self.patientQuestionnaire;
        
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(questionnaireCompleted:) name:@"questionnaireCompleted" object:nil];
        
        
    }
    else if ([segue.identifier isEqualToString:@"EditQuestionnaireSegue"]) {
        
        ((QuestionnaireViewController *)segue.destinationViewController).patientJournal = self.patientJournal;
        ((QuestionnaireViewController *)segue.destinationViewController).editMode = YES;
    }
    
    else if  ([segue.identifier isEqualToString:@"TreatmentLogs"]) {
        
        [self pushBusyOperation];
        NSDateFormatter* dateFormatter = [[NSDateFormatter alloc] init] ;
        [dateFormatter setDateStyle:NSDateFormatterLongStyle];
        NSDate *postedDate = [dateFormatter dateFromString:self.journalOnTextField.text];
        JournalReasonGlobalObject *common = [JournalReasonGlobalObject sharedInstance];
        common.currentDate = postedDate;
        //Comment to delete above - svaz 6/12/14
    }
    
}

- (void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    [self.tableView deselectRowAtIndexPath:[self.tableView indexPathForSelectedRow] animated:YES];
    //#warning NEED TO UNBOLT THESE CELLS AND CODE and HARD CODED FOR NOW
    //    self.tableCellTimesMissed.hidden=YES;
    //    self.tableCellMedicationReasonsMissed.hidden=YES;
    
}

- (void)viewDidLoad {
    [super viewDidLoad];
    
    self.navigationItem.title = @"My Journal";
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(symptomsSelected:) name:@"selectedSymptomList" object:nil];
    
    
    [self loadProfileData];
    
    // manage switches shouldShowMedicationTakenSwitch in the journal 
    // set switch defaults
   
    BOOL shouldShowSymptonSwitch = TRUE;
    BOOL shouldShowMedicationTakenSwitch = TRUE;
    BOOL shouldShowAllergensTodaySwitch = FALSE;
   
    // set switch target overides
    // Hiding switch for diabetes - svaz 5/16/14
    // Hiding switch for Asthmas - rvera 7/2/14
    // Hiding switch for RA - rvera 9/29/14
    
    if ( [[[ConfigurationManager sharedManager] appID] integerValue] == MS2
        || [[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
        || [[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
        || [[[ConfigurationManager sharedManager] appID] integerValue] == AAPA
        || [[[ConfigurationManager sharedManager] appID] integerValue] == RA
      ) {
        shouldShowMedicationTakenSwitch = FALSE;
    }
//--------------------- Symptons switch ---------------------------------------------
    //    int yVal = ([[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0) ? 172 : 152;
    int yVal = ([[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0) ? 176 : 169;
    self.symptomTodaySwitch = [[DCRoundSwitch alloc]initWithFrame:CGRectMake(210, yVal, 79, 27)];
    
    if (shouldShowSymptonSwitch) {
        
        [self.view addSubview:self.symptomTodaySwitch];
        self.symptomTodaySwitch.onText = @"YES";
        self.symptomTodaySwitch.offText = @"NO";
        self.symptomTodaySwitch.onTintColor = [UIColor darkBlue];
    }

//--------------------- Took Medication switch ---------------------------------------------
    //yVal = ([[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0) ? 304 : 284; //Original
    yVal = ([[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0) ? 264 : 244; //minus 50px
    self.medicationTakenTodaySwitch = [[DCRoundSwitch alloc]initWithFrame:CGRectMake(210, yVal, 79, 27)];
    
    if (shouldShowMedicationTakenSwitch) {
        
        [self.view addSubview:self.medicationTakenTodaySwitch];
        self.medicationTakenTodaySwitch.onText = @"YES";
        self.medicationTakenTodaySwitch.offText = @"NO";
        self.medicationTakenTodaySwitch.onTintColor = [UIColor darkBlue];
        
        // added to show more table cells - svaz
        [self.medicationTakenTodaySwitch addTarget:self
                                            action:@selector(toggleTookMedication)
                                  forControlEvents:UIControlEventValueChanged];
        
        
        NSLog(@"Medication on Begin changed = %@", [NSNumber numberWithBool:self.medicationTakenTodaySwitch.on]);
        [self toggleTookMedication];
    }

//--------------------- Allergens switch ---------------------------------------------
    
    if ( [[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
        || [[[ConfigurationManager sharedManager] appID] integerValue] == AAPA
        ) {
        
        shouldShowAllergensTodaySwitch = TRUE;
    }
    
    yVal = ([[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0) ? 264 : 244; //minus 50px - was 304 : 284;
    self.allergensTodaySwitch = [[DCRoundSwitch alloc]initWithFrame:CGRectMake(210, yVal, 79, 27)];
    
    if (shouldShowAllergensTodaySwitch) {
        
        [self.view addSubview:self.allergensTodaySwitch];
        self.allergensTodaySwitch.onText = @"YES";
        self.allergensTodaySwitch.offText = @"NO";
        self.allergensTodaySwitch.onTintColor = [UIColor darkBlue];
        
        // added to show more table cells - svaz
        [self.allergensTodaySwitch addTarget:self
                                            action:@selector(toggleTookAllergensToday)
                                  forControlEvents:UIControlEventValueChanged];
        
            NSLog(@"Medication on Begin changed = %@", [NSNumber numberWithBool:self.allergensTodaySwitch.on]);
        [self toggleTookAllergensToday];
    }
    
    self.journalOnTextField.placeholder = kFieldPlaceHolderText;
    self.dayRatingTextField.placeholder = kFieldPlaceHolderText;
    //self.timeFrameTextField.placeholder = kFieldPlaceHolderText;
    self.painRatingTextField.placeholder = kFieldPlaceHolderText;
    self.moodIdTextField.placeholder = kFieldPlaceHolderText;
    self.abilityIdTextField.placeholder = kFieldPlaceHolderText;
    
    [self.symptomTodaySwitch addTarget:self action:@selector(userInteraction) forControlEvents:UIControlEventValueChanged];
    [self.medicationTakenTodaySwitch addTarget:self action:@selector(userInteraction) forControlEvents:UIControlEventValueChanged];
    [self.allergensTodaySwitch addTarget:self action:@selector(userInteraction) forControlEvents:UIControlEventValueChanged];

    
    self.dayRatingData = @[@"0 Worst", @"1", @"2", @"3", @"4", @"5", @"6", @"7", @"8", @"9", @"10 Best"];
    
    //Rvera-  Add condition for Tiem Frame that is only for Diabetes app ---
//    if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes)
//    {
//        self.timeFrameData = @[@"Before breakfast (fasting)", @"After breakfast", @"Before lunch", @"After lunch",@"Before bedtime", @"During the night", @"Before a snack", @"After a snack",@"Other"];
//    }
   
    //Rvera-  Add condition for Pain Rating that is only for RA app ---
    if ([[[ConfigurationManager sharedManager] appID] integerValue] == RA
        || [[[ConfigurationManager sharedManager] appID] integerValue] == MM)
    {
        self.painRatingData = @[@"0 No pain", @"1", @"2", @"3", @"4", @"5 Moderate pain", @"6", @"7", @"8", @"9", @"10 Worst possible pain"];
    }
    
    self.journalOnTextField.tag = kFormViewControllerFieldDate;
    self.dayRatingTextField.tag = kFormViewControllerFieldNumber;
    //self.timeFrameTextField.tag = kFormViewControllerFieldNumber;
    self.painRatingTextField.tag = kFormViewControllerFieldNumber;
    self.moodIdTextField.tag = kFormViewControllerFieldNumber;
    self.abilityIdTextField.tag = kFormViewControllerFieldNumber;
    
    //Rvera-  Add condition for Pain Rating that is only for RA app ---
    if ([[[ConfigurationManager sharedManager] appID] integerValue] == RA
        || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
        || [[[ConfigurationManager sharedManager] appID] integerValue] == MM)
    {
        self.fields = @[ self.journalOnTextField, self.dayRatingTextField, self.painRatingTextField, self.moodIdTextField, self.abilityIdTextField ];
    }
    
//    else if([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes){
//        self.fields = @[ self.journalOnTextField, self.dayRatingTextField, self.timeFrameTextField, self.moodIdTextField, self.abilityIdTextField ];
//    }
    
    else{
        self.fields = @[ self.journalOnTextField, self.dayRatingTextField, self.moodIdTextField, self.abilityIdTextField ];
    }
    
    
    if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
        || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
        || [[[ConfigurationManager sharedManager] appID] integerValue] == MS
        || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
        || [[[ConfigurationManager sharedManager] appID] integerValue] == RA
        || [[[ConfigurationManager sharedManager] appID] integerValue] == HepC
        || [[[ConfigurationManager sharedManager] appID] integerValue] == PD
        || [[[ConfigurationManager sharedManager] appID] integerValue] == IPF
        || [[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
        || [[[ConfigurationManager sharedManager] appID] integerValue] == AAPA)
    {
        
        self.activityData = @[@"Bicycling", @"Running", @"Swimming", @"Walking", @"Yoga", @"Other", @"None"];
        self.intensityData = @[@"Light", @"Moderate", @"Intense"];
    
        //Added for Asthma --rvera 6/16/14
        if ([[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
            || [[[ConfigurationManager sharedManager] appID] integerValue] == AAPA) {
            
            //self.allergensTodayData = @[@"YES", @"NO"];
            self.inhalerData = @[@"0", @"1", @"2", @"3", @"4", @"5", @"6", @"7", @"8", @"9", @"10", @"11", @"12", @"13", @"14", @"15", @"16", @"17", @"18", @"19",@"20",@"21",@"22",@"23", @"24",@">24"];
            self.shortnessBreathData = @[@"0", @"1", @"2", @"3", @"4", @"5", @"6", @"7", @"8", @"9", @"10", @"11", @"12", @"13", @"14", @"15", @"16", @"17", @"18", @"19",@"20",@"21",@"22",@"23", @"24",@">24"];
        }
        self.diastolicTextField.placeholder = kFieldPlaceHolderText;
        self.systolicTextField.placeholder = kFieldPlaceHolderText;
        
        
        self.inputActivityPicker = [[UIPickerView alloc] initWithFrame:CGRectMake(0, 0, 320, 216)];
        self.inputActivityPicker.delegate = self;
        self.inputActivityPicker.dataSource = self;
        self.inputActivityPicker.showsSelectionIndicator = YES;
        self.activityTextField.inputView = self.inputActivityPicker;
        self.activityTextField.placeholder = kFieldPlaceHolderText;
        
        self.durationTextField.placeholder = kFieldPlaceHolderText;
        
        self.inputIntensityPicker = [[UIPickerView alloc] initWithFrame:CGRectMake(0, 0, 320, 216)];
        self.inputIntensityPicker.delegate = self;
        self.inputIntensityPicker.dataSource = self;
        self.inputIntensityPicker.showsSelectionIndicator = YES;
        self.intensityTextField.inputView = self.inputIntensityPicker;
        self.intensityTextField.placeholder = kFieldPlaceHolderText;
        
        //Added these 4 fields for Asthma -- rvera 6/16/14
        if ([[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
            || [[[ConfigurationManager sharedManager] appID] integerValue] == AAPA) {
            
            self.inhalerTextField.placeholder = kFieldPlaceHolderText;
            self.shortnessBreathTextField.placeholder = kFieldPlaceHolderText;
        }
    
        self.weightTextField.placeholder = kFieldPlaceHolderText;
        self.cholesteralTextField.placeholder = kFieldPlaceHolderText;
        self.peakFlowTextField.placeholder = kFieldPlaceHolderText;
        
        self.fvcTextField.placeholder = kFieldPlaceHolderText;
        self.fvcPercentageTextField.placeholder = kFieldPlaceHolderText;
        self.fevTextField.placeholder = kFieldPlaceHolderText;
        self.fevPercentageTextField.placeholder = kFieldPlaceHolderText;
        self.fefTextField.placeholder = kFieldPlaceHolderText;
        self.fevFvcTextField.placeholder = kFieldPlaceHolderText;
        
       
        //Rvera-  Add condition for Pain Rating that is only for RA app ---
        //reset fields as we have more
        if ([[[ConfigurationManager sharedManager] appID] integerValue] == RA
            || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
            || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD){
            self.fields = @[ self.journalOnTextField, self.dayRatingTextField, self.painRatingTextField, self.moodIdTextField, self.abilityIdTextField, self.diastolicTextField, self.systolicTextField, self.activityTextField, self.durationTextField, self.intensityTextField, self.weightTextField, self.cholesteralTextField ];
        }
        //Added for Asthma --rvera 6/16/14
        else if ([[[ConfigurationManager sharedManager] appID] integerValue] == Asthma
                 || [[[ConfigurationManager sharedManager] appID] integerValue] == AAPA){
            
            self.fields = @[ self.journalOnTextField, self.dayRatingTextField, self.moodIdTextField, self.activityTextField, self.peakFlowTextField, self.fvcTextField,self.fvcPercentageTextField,self.fevTextField,self.fevPercentageTextField, self.fefTextField, self.fevFvcTextField, self.inhalerTextField, self.shortnessBreathTextField ];
        }

        else  {
            self.fields = @[ self.journalOnTextField, self.dayRatingTextField, self.moodIdTextField, self.abilityIdTextField, self.diastolicTextField, self.systolicTextField, self.activityTextField, self.durationTextField, self.intensityTextField, self.weightTextField, self.cholesteralTextField ];
        }
        
        // if (self.editMode) {
        
        //[self.questionnaireButton setTitle:@"Edit Questionnaire" forState:UIControlStateNormal];
        [self.questionnaireButton setTitle:@"Daily Questions" forState:UIControlStateNormal];
        
        [self.questionnaireButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        self.questionnaireButton.titleLabel.font = [UIFont boldSystemFontOfSize:kMediumFontSize];
        self.questionnaireButton.clipsToBounds = YES;
        self.questionnaireButton.layer.cornerRadius = 6.0f;
        self.questionnaireButton.backgroundColor = [UIColor darkBlue];
        [self.questionnaireButton addTarget:self action:@selector(questionnaireButtonTapped:) forControlEvents:UIControlEventTouchUpInside];
        
        
        // Open Logs - svaz
        [self.logsButton setTitle:@"Logs" forState:UIControlStateNormal];
        
        [self.logsButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        self.logsButton.titleLabel.font = [UIFont boldSystemFontOfSize:kMediumFontSize];
        self.logsButton.clipsToBounds = YES;
        self.logsButton.layer.cornerRadius = 6.0f;
        self.logsButton.backgroundColor = [UIColor darkBlue];
//        [self.logsButton addTarget:self action:@selector(logsButtonTapped) forControlEvents:UIControlEventTouchUpInside];
        
    }
    
    
    //}
    
    // SETS EA FIELD FOR A PARTICULAR TYPE - SVAZ
    for (UITextField * field in self.fields) {
        
        NSLog(@" Field is = %@", field);
        field.inputAccessoryView = self.inputAccessoryViewToolbar;
        
        if (field.tag == kFormViewControllerFieldDate){
            field.inputView = self.inputViewDatePicker;
        }
        
        if (field == self.dayRatingTextField){
            field.inputView = self.inputDayRatingrPicker;
        }
        
        if (field == self.timeFrameTextField){
            field.inputView = self.inputTimeFramePicker;
        }

        if (field == self.painRatingTextField){
            field.inputView = self.inputPainRatingrPicker;
        }
        
        if (field == self.moodIdTextField){
            field.inputView = self.inputMoodPicker;
        }
        
        if (field == self.abilityIdTextField){
            field.inputView = self.inputAbilityPicker;
        }
        
    }
    
    self.patientSymptomData = [self.patientJournal.symptomIds componentsSeparatedByString:@", "];
    self.selectedSymptomIds = self.patientJournal.symptomIds;
    
    [self refresh];
    
    // NEW - svaz
    //set defaults for required fields
    if (!self.editMode) {
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        self.mood = [ad.moodData objectAtIndex:0];
        self.dayRating = [self.dayRatingData objectAtIndex:0];
        self.painRating = [self.painRatingData objectAtIndex:0];
        //self.timeFrame = [self.timeFrameData objectAtIndex:0];
        //self.ability = [ad.abilityData objectAtIndex:0];
        
      }
}

-(void)userInteraction {
    [self.delegate userInteractedWithViewController:self];
}

-(void)back{
    
    [self saveTapped];
    
}


- (void)dealloc {
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"selectedSymptomList" object:nil];
    
}


- (IBAction)toggleTookMedication {
//        NSNumber * isOn = [NSNumber numberWithBool:self.medicationTakenTodaySwitch.on];
//        NSLog(@"Medication changed = %@", isOn);
//        if (isOn.integerValue == 1) {
//            // Hide  other cells
//            self.tableCellTimesMissed.hidden=YES;
//            self.tableCellMedicationReasonsMissed.hidden=YES;
//            self.inputMedicationTimesMissedPickerTextField.text=@"";
//            self.inputMedicationReasonMissedPickerTextField.text=@"";
//        }else{
//            //Show cells
//            self.tableCellTimesMissed.hidden=NO;
//            self.tableCellMedicationReasonsMissed.hidden=NO;
//        }
}
- (IBAction)toggleTookAllergensToday {

}


- (IBAction)loadVC{
    AdherenceListViewController *eVC  = [[AdherenceListViewController alloc]init];
    [self presentViewController:eVC animated:YES completion:nil];
    //    [self.navigationController pushViewController:eVC animated:YES];
    
}



//
//- (IBAction)loadLogs {
//    NSLog(@"loadLogs");
//    // if no Log date , then return
//    NSLog(@"loadLogs");
//    
//}
@end
