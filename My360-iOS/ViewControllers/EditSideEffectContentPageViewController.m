//
//  EditSideEffectContentPageViewController.m
//  MSPatient
//
//  Generated by AnyPresence, Inc on 2013-02-26
//  Copyright (c) 2013. All rights reserved.
//

#import <APSDK/AuthManager.h>
#import <APSDK/PatientSideEffectMedication+Remote.h>
#import <APSDK/PatientSideEffectMedication.h>
#import <APSDK/PatientTreatment.h>
#import <APSDK/PatientSideEffectMedication.h>
#import <APSDK/Medication.h>
#import <APSDK/User.h>
#import "AuthManager+Rules.h"
#import "EditSideEffectContentPageViewController.h"
#import "LoadingTableViewCell.h"
#import "UIView+APViewExtensions.h"
#import "UIViewController+UI.h"
#import "SideEffectViewController.h"
#import "MultiSelectMedicationViewController.h"
#import "PikConstants.h"
#import "DCRoundSwitch.h"
#import "UIColor+APColorExtension.h"
#import "NSDate+APDateExtension.h"
#import <APSDK/APObject+Remote.h>
#import "PikConstants.h"
#import <APSDK/Setting+Remote.h>
#import <APSDK/APObject+RemoteRelationships.h>
#import "SideEffectListViewController.h"
#import "ConfigurationManager.h"


typedef enum {
    kEditSideEffectContentPageDataStateReady,
    kEditSideEffectContentPageDataStateLoading,
    kEditSideEffectContentPageDataStateFull
} EditSideEffectContentPageDataState;

@interface EditSideEffectContentPageViewController () 

@property (nonatomic, weak) IBOutlet UITextField * sideEffectIdTextField;
@property (nonatomic, weak) IBOutlet UITextField * sideEffectOnTextField;
@property (nonatomic, weak) IBOutlet UITextField * medicationsListTextField;
@property (nonatomic, weak) IBOutlet UITableViewCell * medicationLabelCell;
@property (nonatomic, weak) IBOutlet UITextField * medicationResponsibleTextField;


- (BOOL)saveTapped;
- (void)refresh;


@end

@implementation EditSideEffectContentPageViewController


@synthesize selectedMedicationIds;
@synthesize selectedMedicationsData;
@synthesize patientSideEffectMedicationData;
@synthesize patientTreatmentMedicationData;
@synthesize medicationLabelCell;
@synthesize medicationResponsibleTextField;
@synthesize sideEffect = _sideEffect;



#pragma mark - Public

- (void)setPatientSideEffect:(PatientSideEffect *)patientSideEffect {
    if (_patientSideEffect != patientSideEffect) {
        _patientSideEffect = patientSideEffect;
        
        if ([self isViewLoaded])
            [self refresh];
    }
}


#pragma mark - Actions

- (BOOL)saveTapped {
    
    //Nothing Changed, Don't Save
    if (!((SideEffectListViewController *)self.delegate).reloadDataOnLoad)return true;
    
    
    if (self.sideEffectIdTextField.text.length == 0) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A side effect is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        return false;
        
    }
    else if (self.sideEffectOnTextField.text.length == 0) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A side effect date is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        return false;
        
    }
    else if([[[self configureDateFormatter:self.dateFormatter field:self.sideEffectOnTextField] dateFromString:self.sideEffectOnTextField.text] compare: [NSDate date]] == NSOrderedDescending){
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"You can not have a side effect for a date in the future." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        return false;
    }

    
    if (self.editMode) {
        self.patientSideEffect.sideEffect = self.sideEffect;//[NSNumber numberWithInt:[self.sideEffectIdTextField.text intValue]];
        self.patientSideEffect.sideEffectOn = [[self configureDateFormatter:self.dateFormatter field:self.sideEffectOnTextField] dateFromString:self.sideEffectOnTextField.text];

        if(![[self.medicationResponsibleTextField.text uppercaseString] isEqualToString:@"YES"]){ //medication is not responsible
            self.selectedMedicationIds = @""; //wipe out any medications
        }
        
        self.patientSideEffect.medicationIds = self.selectedMedicationIds;
        self.patientSideEffect.medicationUnsure = [self.medicationResponsibleTextField.text uppercaseString];
        
        [self pushBusyOperation];
        NSError *err = nil;
        [self.patientSideEffect update:&err];
        [self popBusyOperation];
        if (err) {
            if(ERROR_CODE_401(err)) {
                AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication] delegate];
                [app showSessionTerminatedAlert];
            }
            else [self showMessage:@"Side effect record failed to add."];
        } else {
            //[_self showMessage:@"Side effect record successfully added."];
            [self.navigationController popViewControllerAnimated:YES];
        }
    }
    else {
        
        PatientSideEffect * patientSideEffect = [PatientSideEffect new];
        patientSideEffect.patientId = ((User *)[AuthManager defaultManager].currentCredentials).id;
        
        SideEffect *se = [SideEffect new];
        se.id = self.sideEffect.id;
        se.inactive = self.sideEffect.inactive;
        se.name = self.sideEffect.name;
        patientSideEffect.sideEffect = se;
        patientSideEffect.sideEffectOn = [[self configureDateFormatter:self.dateFormatter field:self.sideEffectOnTextField] dateFromString:self.sideEffectOnTextField.text];
        
        if(![[self.medicationResponsibleTextField.text uppercaseString] isEqualToString:@"YES"]){ //medication is not responsible
            self.selectedMedicationIds = @""; //wipe out any medications
        }
        
        patientSideEffect.medicationIds = self.selectedMedicationIds;
        patientSideEffect.medicationUnsure = [self.medicationResponsibleTextField.text uppercaseString];

        [self pushBusyOperation];
        NSError *err = nil;
        [patientSideEffect create:&err];
        [self popBusyOperation];
        if (err) {
            if(ERROR_CODE_401(err)) {
                AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication] delegate];
                [app showSessionTerminatedAlert];
            }
            else [self showMessage:@"Side effect record failed to add."];
        } else {
            //[_self showMessage:@"Side effect record successfully added."];
            //[_self.navigationController popViewControllerAnimated:YES];
            [self dismissViewControllerAnimated:YES completion:nil];
        }
    }
    return true;
}


-(void)switchToggled:(id)sender
{
    [self.tableView reloadData];
    [self.delegate userInteractedWithViewController:self];
    
}


- (void)refresh {
    
    AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
    for (SideEffect *sideEffect in ad.sideEffectData) {
        
        if ([sideEffect.id intValue] == [self.patientSideEffect.sideEffectId intValue]) {
            self.sideEffect = sideEffect;
            break;
        }
    }
    self.sideEffectIdTextField.text = self.sideEffect.name;
    self.selectedMedicationsData = [[NSMutableArray alloc] init];
    NSString *medicationsLabel = @"";
    
    //loop through the list of selected medication ID's
    for (NSString *medicationID in self.patientSideEffectMedicationData) {
        
        //loop through the list of patient medications
        for (PatientSideEffectMedication *patientSideEffectMedication in self.patientTreatmentMedicationData) {
            
            //if there is a match add it to the list
            if ([patientSideEffectMedication.medicationId intValue] == [medicationID intValue]) {
                [self.selectedMedicationsData addObject:patientSideEffectMedication];
                if (![patientSideEffectMedication isRelationshipLoaded:@"medication"]) {
                    NSError *err = nil;
                    [patientSideEffectMedication loadRelationship:@"medication" error:&err];
                }
                medicationsLabel = [medicationsLabel stringByAppendingString:patientSideEffectMedication.medication.name];
                medicationsLabel = [medicationsLabel stringByAppendingString:@", "];
                break;
            }
        }
    }
    if (medicationsLabel.length > 2) {
        medicationsLabel = [medicationsLabel substringToIndex:[medicationsLabel length] - 2];
        self.medicationsListTextField.text = medicationsLabel;
        
    }
    self.medicationResponsibleTextField.text = [self.patientSideEffect.medicationUnsure capitalizedString];
    self.sideEffectOnTextField.text = [[self configureDateFormatter:[self dateFormatterWithTimeZone:[NSTimeZone timeZoneWithAbbreviation:@"UTC"]] field:self.sideEffectOnTextField] stringFromDate:self.patientSideEffect.sideEffectOn];
    self.navigationController.navigationBar.userInteractionEnabled = true;
}


- (void)sideEffectSelected:(NSNotification *) notification
{
    [self.delegate userInteractedWithViewController:self];
    if ([[notification name] isEqualToString:@"selectedSideEffect"]){
        
        [self.navigationController popViewControllerAnimated:YES];
        
        NSDictionary *userInfo = notification.userInfo;
        
        self.sideEffect = [userInfo objectForKey:@"sideEffect"];
        self.sideEffectIdTextField.text = self.sideEffect.name;
        
        
        [self.tableView reloadData];
        
    }
}


- (void)medicationsSelected:(NSNotification *) notification
{
    [self.delegate userInteractedWithViewController:self];
    if ([[notification name] isEqualToString:@"selectedMedicationList"]){
        
        [self.navigationController popViewControllerAnimated:YES];
        
        NSDictionary *userInfo = notification.userInfo;
        
        self.selectedMedicationsData = [userInfo objectForKey:@"medicationList"];
        
        
        NSString *labelText = @"";
        self.selectedMedicationIds = @"";
        
        for (PatientTreatment *obj in self.selectedMedicationsData) {
            labelText = [labelText stringByAppendingString:obj.medicationDenormalized];
            labelText = [labelText stringByAppendingString:@", "];
            
            self.selectedMedicationIds = [self.selectedMedicationIds stringByAppendingString:[obj.medicationId stringValue]];
            self.selectedMedicationIds = [self.selectedMedicationIds stringByAppendingString:@", "];
        }
        
        if (self.selectedMedicationIds.length >  2) {
            
            labelText = [labelText substringToIndex:[labelText length] - 2];
            self.selectedMedicationIds = [self.selectedMedicationIds substringToIndex:[self.selectedMedicationIds length] - 2];
        }
        
        self.medicationsListTextField.text = labelText;
        
        [self.tableView reloadData];
        
    }
}



#pragma mark - UITableView Delegate
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    NSInteger numberOfSections = 3;
    
    if (![[self.medicationResponsibleTextField.text uppercaseString] isEqualToString:@"YES"]) {
        numberOfSections = 2;
    }
    
    return numberOfSections;
}


- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    
    CGFloat headerHeight = 0;
    
    if (section == 2) {
        headerHeight = 44;
    }
    
    
    return headerHeight;
}


- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section
{
    
    UILabel *headerView;
    
    if (section == 2) {
        headerView = [[UILabel alloc] initWithFrame:CGRectMake(20, 0, self.view.frame.size.width - 40, 30)];
        headerView.backgroundColor = [UIColor clearColor];
        
        headerView.textColor = [UIColor whiteColor];
        headerView.numberOfLines = 2;
        [headerView setFont:[UIFont fontWithName:@"Helvetica" size:kMediumFontSize]];
        headerView.textAlignment = NSTextAlignmentCenter;

        headerView.text = @"Select Medications Responsible \nfor Side Effect";
    }
    
    return headerView;
    
}




#pragma mark - UITextFieldDelegate

- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField {
    [self.delegate userInteractedWithViewController:self];
    if (textField.tag == kFormViewControllerFieldDate) {
        if (textField.text.length > 0) {
            NSDateFormatter * formatter = [self configureDateFormatter:self.dateFormatter field:textField];
            self.inputViewDatePicker.date = [formatter dateFromString:textField.text];
        }
        else {
            NSDateFormatter * formatter = [self configureDateFormatter:self.dateFormatter field:textField];
            textField.text = [formatter stringFromDate:self.inputViewDatePicker.date];
        }
        
        self.inputViewDatePicker.datePickerMode = UIDatePickerModeDate;
    }
    
    if (textField == self.medicationResponsibleTextField) {
        self.medicationResponsibleTextField.text = @"Yes";
    }
    
    return YES;
}


#pragma mark - UIViewController
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    
    if ([segue.identifier isEqualToString:@"SideEffectSegue"])
    {
        SideEffectViewController *controller = (SideEffectViewController *)[segue destinationViewController];
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        controller.tableData = ad.sideEffectData;
    }
    else if ([segue.identifier isEqualToString:@"MedicationSegue"])
    {
        
        MultiSelectMedicationViewController *controller = (MultiSelectMedicationViewController *)[segue destinationViewController];
        controller.tableData = self.patientTreatmentMedicationData;
        controller.selectedTableData = [NSMutableArray arrayWithArray:self.selectedMedicationsData];
    }
}

- (void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    [self.tableView deselectRowAtIndexPath:[self.tableView indexPathForSelectedRow] animated:YES];
}


- (void)viewDidLoad {
    [super viewDidLoad];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(sideEffectSelected:) name:@"selectedSideEffect" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(medicationsSelected:) name:@"selectedMedicationList" object:nil];
    self.sideEffectOnTextField.placeholder = kFieldPlaceHolderText;
    UIPickerView * medResponsiblePicker = [[UIPickerView alloc] initWithFrame:CGRectZero];
    medResponsiblePicker.delegate = self;
    medResponsiblePicker.dataSource = self;
    medResponsiblePicker.showsSelectionIndicator = YES;
    [medResponsiblePicker sizeToFit];
    self.medicationResponsibleTextField.inputView = medResponsiblePicker;
    self.medicationResponsibleTextField.placeholder = kFieldPlaceHolderText;
    self.medicationResponsibleTextField.delegate = self;
    self.medicationResponsibleTextField.inputAccessoryView = self.inputAccessoryViewToolbar;
    //[self.medicationResponsibleSwitch addTarget:self action:@selector(switchToggled:) forControlEvents: UIControlEventValueChanged];

    self.sideEffectOnTextField.tag = kFormViewControllerFieldDate;
    
    self.fields = @[ self.sideEffectOnTextField ];
    
    for (UITextField * field in self.fields) {
        field.inputAccessoryView = self.inputAccessoryViewToolbar;
        
        if (field.tag == kFormViewControllerFieldDate){
            field.inputView = self.inputViewDatePicker;
        }
    }


    self.patientSideEffectMedicationData = [self.patientSideEffect.medicationIds componentsSeparatedByString:@", "];
    self.selectedMedicationIds = self.patientSideEffect.medicationIds;
    
    [self refresh];
    
    
    if(!self.editMode){
        NSDictionary *params = [[NSDictionary alloc]initWithObjects:[NSArray arrayWithObjects:[[ConfigurationManager sharedManager] appID], nil] forKeys:[NSArray arrayWithObjects:@"app_id", nil]];
        [Setting exactMatchWithParams:params offset:0 limit:10 async:^(NSArray *objects, NSError *error) {
            Setting *globals;
            for (Setting *stg in objects)
                if (!error) {
                    if ([objects count] > 0) {
                        globals = [objects objectAtIndex:0]; // there should only be one
                        UIAlertView *alert = [[UIAlertView alloc]init];
                        alert.title = @"Warning!";
                        alert.message = globals.severeSymptomMsg;
                        [alert addButtonWithTitle:@"OK"];
                        [alert setCancelButtonIndex:0];
                        [alert setTag:1];
                        [alert show];
                        NSLog(@"%@",stg);
                    }
                }
        }];
    }
    
}


- (void)dealloc {
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"selectedSideEffect" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"selectedMedicationList" object:nil];
    
}


-(void)back{
    if([self saveTapped]) [super back];
    else return;
}

#pragma mark - PickerView delegate

-(NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView
{
    
    return 1;
}


-(NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component
{
    return 3;
}


-(NSString*)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component
{
    NSArray * options = [[NSArray alloc]initWithObjects:@"Yes",@"No",@"Unsure", nil];
    return [options objectAtIndex:row];
}


- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component
{
    [self.delegate userInteractedWithViewController:self];
    NSArray * options = [[NSArray alloc]initWithObjects:@"Yes",@"No",@"Unsure", nil];
    self.medicationResponsibleTextField.text = [options objectAtIndex:row];
    [self becomeFirstResponder];
}

- (IBAction)doneBarButtonItemTapped{
    [self.tableView reloadData];
    [super doneBarButtonItemTapped];
}

@end
