//
//  EditJournalPageViewController.m
//  MSPatient
//
//  Generated by AnyPresence, Inc on 2013-02-26
//  Copyright (c) 2013. All rights reserved.
//

#import <APSDK/AuthManager.h>
#import <APSDK/User.h>
#import "AuthManager+Rules.h"
#import "EditJournalPageViewController.h"
#import "UIView+APViewExtensions.h"


@interface EditJournalPageViewController () 

@property (nonatomic, weak) IBOutlet UIScrollView * scrollView;
@property (nonatomic, assign) BOOL observersSet;

- (void)refreshAnimated:(BOOL)animated;
- (void)resize:(UIView *)subview to:(CGSize)newSize animated:(BOOL)animated;
- (void)addObservers;
- (void)removeObservers;

@end

@implementation EditJournalPageViewController

#pragma mark - Public

- (void)setPatientJournal:(PatientJournal *)patientJournal {
    if (_patientJournal != patientJournal) {
        _patientJournal = patientJournal;

        if ([self isViewLoaded])
            [self refreshAnimated:!!self.view.window];
    }
}

#pragma mark - Actions


#pragma mark - Private

- (void)refreshAnimated:(BOOL)animated {

    self.navigationItem.title = [AppDelegate interpolateString:NSLocalizedString(@"My Journal", @"My Journal") objectInstance:self.patientJournal];

    for (UIView * subview in @[  ]) {
        if ([[AuthManager defaultManager] isAuthorized:subview]) {
            [self resize:subview to:subview.frame.size animated:animated];
        } else {
            [self resize:subview to:CGSizeZero animated:animated];
        }
    }
}

- (void)addObservers {
    if (!self.observersSet) {
        self.observersSet = YES;
        [[AuthManager defaultManager] addObserver:self forKeyPath:@"currentCredentials" options:0 context:nil];
    }
}

- (void)removeObservers {
    if (self.observersSet) {
        self.observersSet = NO;
        
        [[AuthManager defaultManager] removeObserver:self forKeyPath:@"currentCredentials"];
    }
}


- (void)resize:(UIView *)subview to:(CGSize)newSize animated:(BOOL)animated {
    CGFloat delta = newSize.height - (subview.hidden ? 0.f : CGRectGetHeight(subview.frame));
    if (fabs(delta) > 1.f && subview) {
        CGFloat y = delta > 0 ? CGRectGetMinY(subview.frame) : CGRectGetMaxY(subview.frame);
        
        void (^resize)() = ^{
            if (CGSizeEqualToSize(newSize, CGSizeZero)) {
                subview.hidden = YES;
            } else {
                subview.hidden = NO;
                subview.frame = CGRectIntegral(CGRectMake(CGRectGetMinX(subview.frame),
                                                          CGRectGetMinY(subview.frame),
                                                          newSize.width,
                                                          newSize.height));
            }
            
            for (UIView * child in self.scrollView.subviews) {
                if (child != subview && CGRectGetMinY(child.frame) >= y) {
                    child.frame = CGRectIntegral(CGRectMake(CGRectGetMinX(child.frame),
                                                            CGRectGetMinY(child.frame) + delta,
                                                            CGRectGetWidth(child.frame),
                                                            CGRectGetHeight(child.frame)));
                }
            }
            
                
        };
       
    // TODO: Operation queue
    //    if (animated) {
    //        [UIView animateWithDuration:.5f animations:resize];
    //    } else {
            resize();
    //    }
    
        self.scrollView.contentSize = CGSizeMake(self.scrollView.contentSize.width,self.scrollView.contentSize.height + delta);
    }
}

#pragma mark - UIViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    [self addObservers];

    [self refreshAnimated:animated];

}

- (void)viewWillDisappear:(BOOL)animated {
    [super viewWillDisappear:animated];
    
    [self removeObservers];
}

#pragma mark - NSKeyValueObserving

- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {
    if (object == [AuthManager defaultManager] && [keyPath isEqualToString:@"currentCredentials"]) {
        [self refreshAnimated:!!self.view.window];
    } else
        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];

}

#pragma mark NSObject

- (void)dealloc {
    [self removeObservers];
}

@end
