//
//  EditJournalResultPageViewController.m
//  MSPatient
//
//  Generated by AnyPresence, Inc on 2013-03-02
//  Copyright (c) 2013. All rights reserved.
//

#import <APSDK/AuthManager.h>
#import <APSDK/PatientJournal+Remote.h>
#import <APSDK/User.h>
#import <APSDK/PatientJournalQuestionnaire+Remote.h>
#import <APSDK/Symptom.h>
#import "AuthManager+Rules.h"
#import "EditJournalResultPageViewController.h"
#import "MBProgressHUD.h"
#import "UIViewController+UI.h"
#import "MultiSelectSymptomViewController.h"
#import "DCRoundSwitch.h"
#import "UIColor+APColorExtension.h"
#import "NSDate+APDateExtension.h"
#import <APSDK/APObject+Remote.h>
#import <APSDK/Setting+Remote.h>
#import "PikConstants.h"
#import <APSDK/APObject+RemoteRelationships.h>
#import "JournalListViewController.h"
#import "ConfigurationManager.h"
#import "QuestionnaireViewController.h"


@interface EditJournalResultPageViewController () <UIPickerViewDelegate, UIPickerViewDataSource, UIAlertViewDelegate>

@property (nonatomic, weak) IBOutlet UITextField * abilityIdTextField;
@property (nonatomic, weak) IBOutlet UITextField * dayRatingTextField;
@property (nonatomic, weak) IBOutlet UITextField * journalOnTextField;
@property (nonatomic, strong) DCRoundSwitch * medicationTakenTodaySwitch;
@property (nonatomic, strong) DCRoundSwitch * symptomTodaySwitch;
@property (nonatomic, weak) IBOutlet UITextField * moodIdTextField;
@property (nonatomic, weak) IBOutlet UITextField * symptomListTextField;

@property (nonatomic, strong, readonly) UIPickerView * inputDayRatingrPicker;
@property (nonatomic, strong, readonly) UIPickerView * inputMoodPicker;
@property (nonatomic, strong, readonly) UIPickerView * inputAbilityPicker;

//Diabetes, COPD, MM, RA app fields
@property (nonatomic, weak) IBOutlet UITextField *activityTextField;
@property (nonatomic, weak) IBOutlet UITextField *durationTextField;
@property (nonatomic, weak) IBOutlet UITextField *intensityTextField;
@property (nonatomic, weak) IBOutlet UITextField *diastolicTextField;
@property (nonatomic, weak) IBOutlet UITextField *systolicTextField;
@property (nonatomic, weak) IBOutlet UITextField *weightTextField;
@property (nonatomic, weak) IBOutlet UITextField *cholesteralTextField;
@property (nonatomic, weak) IBOutlet UIButton *questionnaireButton;
@property (nonatomic, strong) UIPickerView * inputActivityPicker;
@property (nonatomic, strong) UIPickerView * inputIntensityPicker;
@property (nonatomic, strong) NSArray *activityData;
@property (nonatomic, strong) NSArray *intensityData;


- (void)refresh;


@end

@implementation EditJournalResultPageViewController



@synthesize inputDayRatingrPicker = _inputDayRatingrPicker;
@synthesize inputMoodPicker = _inputMoodPicker;
@synthesize inputAbilityPicker = _inputAbilityPicker;

@synthesize patientSymptomData;
@synthesize selectedSymptomData;
@synthesize selectedSymptomIds;
@synthesize mood = _mood;
@synthesize ability = _ability;
@synthesize dayRating;
@synthesize dayRatingData;


#pragma mark - Public

- (void)setPatientJournal:(PatientJournal *)patientJournal {
    if (_patientJournal != patientJournal) {
        _patientJournal = patientJournal;
        
        if ([self isViewLoaded])
            [self refresh];
    }
}


#pragma mark - Actions

-(BOOL)haveExistingJournal
{
    
    NSError *err = nil;
    NSDictionary *params = [[NSDictionary alloc]initWithObjects:[[NSArray alloc]initWithObjects:self.journalOnTextField.text,((User *)[AuthManager defaultManager].currentCredentials).id,nil] forKeys:[[NSArray alloc]initWithObjects:@"date",@"patient_id",nil]];
    NSArray *objects = [PatientJournal query:@"journal_date_match" params:params error:&err];
    if (err == nil) {
        if ([objects count] > 0) {
            
            return YES;
        }
    }

    return NO;
}


- (void)saveTapped {
    
    if (self.editMode && self.somethingChanged) {
        
        self.patientJournal.ability = self.ability;
        self.patientJournal.dayRating = self.dayRating;
        self.patientJournal.journalOn = [[self configureDateFormatter:self.dateFormatter field:self.journalOnTextField] dateFromString:self.journalOnTextField.text];
        self.patientJournal.medicationTakenToday = [NSNumber numberWithBool:self.medicationTakenTodaySwitch.on];
        self.patientJournal.mood = self.mood;
        self.patientJournal.symptomToday = [NSNumber numberWithBool:self.symptomTodaySwitch.on];
        self.patientJournal.symptomIds = self.selectedSymptomIds;
        
        if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes) {
            
            NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
            [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
            
            self.patientJournal.activity = self.activityTextField.text;
            self.patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
            self.patientJournal.activityIntensity = self.intensityTextField.text;
            self.patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
            self.patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
            self.patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
            self.patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
        }
        
        else if ([[[ConfigurationManager sharedManager] appID] integerValue] == COPD) {
                
                NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
                [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
                
                self.patientJournal.activity = self.activityTextField.text;
                self.patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
                self.patientJournal.activityIntensity = self.intensityTextField.text;
                self.patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
                self.patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
                self.patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
                self.patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
            }
        else if ([[[ConfigurationManager sharedManager] appID] integerValue] == MM) {
            
            NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
            [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
            
            self.patientJournal.activity = self.activityTextField.text;
            self.patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
            self.patientJournal.activityIntensity = self.intensityTextField.text;
            self.patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
            self.patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
            self.patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
            self.patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
        }
        else if ([[[ConfigurationManager sharedManager] appID] integerValue] == RA) {
            
            NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
            [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
            
            self.patientJournal.activity = self.activityTextField.text;
            self.patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
            self.patientJournal.activityIntensity = self.intensityTextField.text;
            self.patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
            self.patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
            self.patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
            self.patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
        }
        [self pushBusyOperation];
        
        [self.patientJournal updateAsync:^(id object, NSError *error) {
            
            [self popBusyOperation];
            
            if (error) {
                if(ERROR_CODE_401(error)) {
                    AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication] delegate];
                    [app showSessionTerminatedAlert];
                }
                else {
                    [self showMessage:@"Journal record failed to save."];
                }
            }
            else {
                
                if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
                    || [[[ConfigurationManager sharedManager] appID] integerValue] == RA) {
                    
                    if (self.patientJournal.weight && self.userProfile.goalWeight && [self.patientJournal.weight intValue] < [self.userProfile.goalWeight intValue]) {
                        [self showMessage:@"Goal weight met. Set a new goal in Settings::My Profile."];
                        
                    }
                }
                
                [self.navigationController popViewControllerAnimated:YES];
            }
            
        }];
    }
    else if (!self.editMode) {
        
        if (self.journalOnTextField.text.length == 0) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A start day is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        
        if (self.dayRatingTextField.text.length == 0) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A rating is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        
        if (self.moodIdTextField.text.length == 0) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A mood is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        
        if (self.abilityIdTextField.text.length == 0) {
            // climb superview ladder until we find the container cell
            UIView* subView = (UIView*)self.abilityIdTextField.superview;
            while (subView && ![subView isKindOfClass:[UITableViewCell class]]) {
                subView = subView.superview;
            }
            if (subView.hidden != 1) { // check if cell is hidden
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"A disability level is required." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
        }
        
        
        if ([self haveExistingJournal]) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error!" message:@"You have already created a journal entry for this date." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        else {
            
            PatientJournal *patientJournal = [PatientJournal new];
            
            patientJournal.patientId = ((User *)[AuthManager defaultManager].currentCredentials).id;
            
            Ability *a = [Ability new];
            a.id = self.ability.id;
            a.inactive = self.ability.inactive;
            a.name = self.ability.name;
            a.summary = self.ability.summary;
            
            patientJournal.ability = a;
            patientJournal.dayRating = self.dayRating;
            patientJournal.journalOn = [[self configureDateFormatter:self.dateFormatter field:self.journalOnTextField] dateFromString:self.journalOnTextField.text];
            patientJournal.medicationTakenToday = [NSNumber numberWithBool:self.medicationTakenTodaySwitch.on];
            Mood *m = [Mood new];
            m.id = self.mood.id;
            m.inactive = self.mood.inactive;
            m.name = self.mood.name;
            patientJournal.mood = m;
            patientJournal.symptomToday = [NSNumber numberWithBool:self.symptomTodaySwitch.on];
            patientJournal.symptomIds = self.selectedSymptomIds;
            
            
            if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
                || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
                || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
                || [[[ConfigurationManager sharedManager] appID] integerValue] == RA) {
                
                NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
                [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
                
                patientJournal.activity = self.activityTextField.text;
                patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
                patientJournal.activityIntensity = self.intensityTextField.text;
                patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
                patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
                patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
                patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
            }
            
            else if ([[[ConfigurationManager sharedManager] appID] integerValue] == COPD) {
                    
                    NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
                    [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
                    
                    patientJournal.activity = self.activityTextField.text;
                    patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
                    patientJournal.activityIntensity = self.intensityTextField.text;
                    patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
                    patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
                    patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
                    patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
                }
            else if ([[[ConfigurationManager sharedManager] appID] integerValue] == MM) {
                
                NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
                [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
                
                patientJournal.activity = self.activityTextField.text;
                patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
                patientJournal.activityIntensity = self.intensityTextField.text;
                patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
                patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
                patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
                patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
            }
            else if ([[[ConfigurationManager sharedManager] appID] integerValue] == RA) {
                
                NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
                [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
                
                patientJournal.activity = self.activityTextField.text;
                patientJournal.duration = [numberFormatter numberFromString:self.durationTextField.text];;
                patientJournal.activityIntensity = self.intensityTextField.text;
                patientJournal.bpDiastolic = [numberFormatter numberFromString:self.diastolicTextField.text];
                patientJournal.bpSystolic = [numberFormatter numberFromString:self.systolicTextField.text];
                patientJournal.cholesterol = [numberFormatter numberFromString:self.cholesteralTextField.text];
                patientJournal.weight = [numberFormatter numberFromString:self.weightTextField.text];
            }
            
            [self pushBusyOperation];
            
            [patientJournal createAsync:^(id obj, NSError *error) {
                
                [self popBusyOperation];
                if (error) {
                    if(ERROR_CODE_401(error)) {
                        AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication] delegate];
                        [app showSessionTerminatedAlert];
                    }
                    else {
                        [self showMessage:@"Journal record failed to save."];
                    }
                }
                else {
                    
                        //every journal entry needs to have a current questionnaire
                        PatientJournalQuestionnaire *patientQuestionnaire = [PatientJournalQuestionnaire new];
                        patientQuestionnaire.patientJournalId = patientJournal.id;
                        patientQuestionnaire.applicationQuestionnaireId = [[ConfigurationManager sharedManager] appID];
                        
                        [patientQuestionnaire createAsync:^(id object, NSError *error) {
                            
                            if (error) {
                                NSLog(@"Error Creating Questionnaire");
                            }
                            
                        }];
                        
                    
                    
                    if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
                        || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
                        || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
                        || [[[ConfigurationManager sharedManager] appID] integerValue] == RA) {
                        
                        if (patientJournal.weight && self.userProfile.goalWeight && [self.patientJournal.weight intValue] < [self.userProfile.goalWeight intValue]) {
                            [self showMessage:@"Goal weight met. Set a new goal in Settings::My Profile."];
                            
                        }
                        
                        self.patientJournal = obj;
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Complete Questionnaire?" delegate:self cancelButtonTitle:@"NO" otherButtonTitles:@"YES", nil];
                        [alert show];
                        
                    }
                    else {
                        [self dismissViewControllerAnimated:YES completion:nil];
                    }
                }
            }];
        }
    }
    else {
        [self.navigationController popViewControllerAnimated:YES];
        
    }
}



- (UIPickerView *)inputDayRatingrPicker {
    if (!_inputDayRatingrPicker) {
        _inputDayRatingrPicker = [[UIPickerView alloc] initWithFrame:CGRectZero];
        
        _inputDayRatingrPicker.delegate = self;
        _inputDayRatingrPicker.dataSource = self;
        _inputDayRatingrPicker.showsSelectionIndicator = YES;
        
        [_inputDayRatingrPicker sizeToFit];
    }
    
    return _inputDayRatingrPicker;
}


- (UIPickerView *)inputMoodPicker {
    if (!_inputMoodPicker) {
        _inputMoodPicker = [[UIPickerView alloc] initWithFrame:CGRectZero];
        
        _inputMoodPicker.delegate = self;
        _inputMoodPicker.dataSource = self;
        _inputMoodPicker.showsSelectionIndicator = YES;
        
        [_inputMoodPicker sizeToFit];
    }
    
    return _inputMoodPicker;
}


- (UIPickerView *)inputAbilityPicker {
    if (!_inputAbilityPicker) {
        _inputAbilityPicker = [[UIPickerView alloc] initWithFrame:CGRectZero];
        
        _inputAbilityPicker.delegate = self;
        _inputAbilityPicker.dataSource = self;
        _inputAbilityPicker.showsSelectionIndicator = YES;
        
        [_inputAbilityPicker sizeToFit];
    }
    
    return _inputAbilityPicker;
}


- (void)symptomsSelected:(NSNotification *) notification
{
        [self.delegate userInteractedWithViewController:self];
    self.somethingChanged = YES;

    if ([[notification name] isEqualToString:@"selectedSymptomList"]){
        
        
        NSDictionary *userInfo = notification.userInfo;
        
        self.selectedSymptomData = [userInfo objectForKey:@"symptomList"];
        
        
        NSString *labelText = @"";
        self.selectedSymptomIds = @"";
        
        for (Symptom *obj in self.selectedSymptomData) {
            labelText = [labelText stringByAppendingString:obj.name];
            labelText = [labelText stringByAppendingString:@", "];
            
            //the ids are sent when the user saves
            self.selectedSymptomIds = [self.selectedSymptomIds stringByAppendingString:[obj.id stringValue]];
            self.selectedSymptomIds = [self.selectedSymptomIds stringByAppendingString:@", "];
            
        }
        
        
        if (self.selectedSymptomIds.length > 2) {
            //trim off the traing comma and space
            labelText = [labelText substringToIndex:[labelText length] - 2];
            self.selectedSymptomIds = [self.selectedSymptomIds substringToIndex:[self.selectedSymptomIds length] - 2];
            
        }
        
        self.symptomListTextField.text = labelText;
        
        [self.tableView reloadData];
        
    }
}


- (void)questionnaireButtonTapped:(id)sender
{
    
    [self performSegueWithIdentifier:@"EditQuestionnaireSegue" sender:self];
    
}


#pragma mark - Data
- (void)refresh {
    AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
    for (Mood *mood in ad.moodData) {
        if ([mood.id intValue] == [self.patientJournal.moodId intValue]) {
            self.mood = mood;
            break;
        }
    }
    
    
    for (Ability *ability in ad.abilityData) {
        if ([ability.id intValue] == [self.patientJournal.abilityId intValue]) {
            self.ability = ability;
            break;
        }
    }
    self.selectedSymptomData = [[NSMutableArray alloc] init];
    NSString *symptomsLabel = @"";
    //loop through the list of selected symptom ID's
    for (NSString *symptomID in self.patientSymptomData) {
        
        //loop through the list of symptoms
        for (Symptom *symptom in ad.symptomData) {
            
            //if there is a match add it to the list
            if ([symptom.id intValue] == [symptomID intValue]) {
                
                [self.selectedSymptomData addObject:symptom];
                symptomsLabel = [symptomsLabel stringByAppendingString:symptom.name];
                symptomsLabel = [symptomsLabel stringByAppendingString:@", "];
                break;
            }
        }
    }
    
    
    if (symptomsLabel.length > 2) {
        symptomsLabel = [symptomsLabel substringToIndex:[symptomsLabel length] - 2];
        self.symptomListTextField.text = symptomsLabel;
        
    }
    
    self.journalOnTextField.text = [[self configureDateFormatter:[self dateFormatterWithTimeZone:[NSTimeZone timeZoneWithAbbreviation:@"UTC"]] field:self.journalOnTextField] stringFromDate:self.patientJournal.journalOn];
    self.dayRatingTextField.text = [self.patientJournal.dayRating description];
    self.symptomTodaySwitch.on = [self.patientJournal.symptomToday boolValue];
    self.medicationTakenTodaySwitch.on = [self.patientJournal.medicationTakenToday boolValue];
    self.moodIdTextField.text = self.mood.name;
    self.abilityIdTextField.text = self.ability.name;
    self.dayRating = self.patientJournal.dayRating;
    
    
    if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
        || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
        || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
        || [[[ConfigurationManager sharedManager] appID] integerValue] == RA) {
        
        self.activityTextField.text = self.patientJournal.activity;
        self.durationTextField.text = [self.patientJournal.duration stringValue];
        self.intensityTextField.text = self.patientJournal.activityIntensity;
        self.diastolicTextField.text = [self.patientJournal.bpDiastolic stringValue];
        self.systolicTextField.text = [self.patientJournal.bpSystolic stringValue];
        self.cholesteralTextField.text = [self.patientJournal.cholesterol stringValue];
        self.weightTextField.text = [self.patientJournal.weight stringValue];
        
    }
}

- (void)loadProfileData
{
    [UserProfile query:@"my_profile" params:nil  async:^(NSArray * objects, NSError * error) {
        
        if (error) {
            if(ERROR_CODE_401(error)) {
                AppDelegate *app = (AppDelegate *)[[UIApplication sharedApplication] delegate];
                [app showSessionTerminatedAlert];
            }
            else {
                [self showMessage:[error localizedDescription] ? : @"Error"];
            }
        }
        else if (objects.count > 0) {
            
            self.userProfile = [objects objectAtIndex:0];
        }
    }];
}


#pragma mark - UITextFieldDelegate

- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField {
    
    [self.delegate userInteractedWithViewController:self];
    self.somethingChanged = YES;
    
    if (textField.tag == kFormViewControllerFieldDate) {
        if (textField.text.length > 0) {
            NSDateFormatter * formatter = [self configureDateFormatter:self.dateFormatter field:textField];
            self.inputViewDatePicker.date = [formatter dateFromString:textField.text];
        }
        else {
            NSDateFormatter * formatter = [self configureDateFormatter:self.dateFormatter field:textField];
            textField.text = [formatter stringFromDate:self.inputViewDatePicker.date];
        }
       
       self.inputViewDatePicker.datePickerMode = UIDatePickerModeDate;
    }
    
    if (textField == self.dayRatingTextField) {
        if (textField.text.length > 0) {
            
            [self.inputDayRatingrPicker selectRow:[self.dayRating intValue] inComponent:0 animated:YES];
        }
        else {
            self.dayRating = [NSNumber numberWithInt:0];
            textField.text = @"0";
        }
    }

    if (textField == self.moodIdTextField) {
        if (textField.text.length > 0) {
            AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
            NSInteger row = [ad.moodData indexOfObject:self.mood];
            [self.inputMoodPicker selectRow:row inComponent:0 animated:YES];
        }
        else {
            AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
            self.mood = [ad.moodData objectAtIndex:0];
            textField.text = self.mood.name;
        }
    }
    
    
    if (textField == self.abilityIdTextField) {
        if (textField.text.length > 0) {
            AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
            NSInteger row = [ad.abilityData indexOfObject:self.ability];
            [self.inputAbilityPicker selectRow:row inComponent:0 animated:YES];
        }
        else {
            AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
            self.ability = [ad.abilityData objectAtIndex:0];
            textField.text = self.ability.name;
        }
    }
    
    
    if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
        || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
        || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
        || [[[ConfigurationManager sharedManager] appID] integerValue] == RA) {
        
        if (textField == self.activityTextField) {
            if (textField.text.length > 0) {
                
                NSInteger row = [self.activityData indexOfObject:self.activityTextField.text];
                
                [self.inputActivityPicker selectRow:row inComponent:0 animated:YES];
            }
            else {
                self.activityTextField.text = [self.activityData objectAtIndex:0];
            }
        }
        else if (textField == self.intensityTextField) {
            if (textField.text.length > 0) {
                
                NSInteger row = [self.intensityData indexOfObject:self.intensityTextField.text];
                
                [self.inputIntensityPicker selectRow:row inComponent:0 animated:YES];
            }
            else {
                self.intensityTextField.text = [self.intensityData objectAtIndex:0];
            }
        }
    }
    
    
    return YES;
}


#pragma mark - PickerView delegate

-(NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView
{
    
    return 1;
}


-(NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component
{
    NSInteger numberOfRows = 0;
    
    if (pickerView == self.inputMoodPicker) {
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        numberOfRows = ad.moodData.count;
    }
    else if (pickerView == self.inputAbilityPicker){
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        numberOfRows = ad.abilityData.count;
        
    }
    else if (pickerView == self.inputDayRatingrPicker){
        numberOfRows = self.dayRatingData.count;
        
    }
    else if (pickerView == self.inputActivityPicker) {
        numberOfRows = self.activityData.count;
    }
    else if (pickerView == self.inputIntensityPicker) {
        numberOfRows = self.intensityData.count;
    }
    
    return numberOfRows;

}


-(NSString*)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component
{
    
    NSString * title;
    
    if (pickerView == self.inputMoodPicker) {
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        Mood *mood = [ad.moodData objectAtIndex:row];
        title = mood.name;
        
    }
    else if (pickerView == self.inputAbilityPicker){
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        Ability *ability = [ad.abilityData objectAtIndex:row];
        title = ability.name;
        
    }
    else if (pickerView == self.inputDayRatingrPicker){
        title = [self.dayRatingData objectAtIndex:row];
        
    }
    else if (pickerView == self.inputActivityPicker) {
        title = [self.activityData objectAtIndex:row];
    }
    else if (pickerView == self.inputIntensityPicker) {
        title = [self.intensityData objectAtIndex:row];
    }
    

    return title;
    
}


- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component
{
    
    if (pickerView == self.inputMoodPicker) {
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        self.mood = [ad.moodData objectAtIndex:row];
        self.moodIdTextField.text = self.mood.name;
        
    }
    else if (pickerView == self.inputAbilityPicker){
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        self.ability = [ad.abilityData objectAtIndex:row];
        self.abilityIdTextField.text = self.ability.name;
        
    }
    else if (pickerView == self.inputDayRatingrPicker){
        self.dayRating = [NSNumber numberWithInt:row];
        self.dayRatingTextField.text = [NSString stringWithFormat:@"%i", row];
        
    }
    else if (pickerView == self.inputActivityPicker) {
        self.activityTextField.text = [self.activityData objectAtIndex:row];
    }
    else if (pickerView == self.inputIntensityPicker) {
        self.intensityTextField.text = [self.intensityData objectAtIndex:row];
    }
    

    [self.delegate userInteractedWithViewController:self];
    self.somethingChanged = YES;
}

/*
- (UIView *)pickerView:(UIPickerView *)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView *)view {
    UITableViewCell *cell = (UITableViewCell *)view;
    
    if( cell == nil ) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil];
        [cell setBackgroundColor:[UIColor clearColor]];
        [cell setBounds: CGRectMake(0, 0, cell.frame.size.width -20 , 44)];
    }
    
    if (pickerView == self.inputAbilityPicker){
        UIButton *infoButton = [UIButton buttonWithType:UIButtonTypeInfoDark];
        [infoButton addTarget:self action:@selector(showAbilityInfo:) forControlEvents:UIControlEventTouchUpInside];
        [infoButton setTag:row];
        [cell setAccessoryView:infoButton];
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        cell.textLabel.text = [[ad.abilityData objectAtIndex:row] name];
        return cell;
    }
    else if(pickerView == self.inputMoodPicker){
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        cell.textLabel.text = [[ad.moodData objectAtIndex:row] name];
        return cell;
    }
    else if (pickerView == self.inputDayRatingrPicker){
        cell.textLabel.text = [self.dayRatingData objectAtIndex:row];
        return cell;
    }
    else {
        return view;
    }
}
 
 */


-(void)showAbilityInfo:(id)sender {
    UIButton *btn = (UIButton *)sender;
    AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
    UIAlertView *alert = [[UIAlertView alloc]
        initWithTitle:[[ad.abilityData objectAtIndex:btn.tag] name]
        message:[[ad.abilityData objectAtIndex:btn.tag] summary]
        delegate:nil
        cancelButtonTitle:@"Ok"
        otherButtonTitles:nil];
    [alert show];
}



#pragma mark - AlertView Delegate
-(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    if (buttonIndex == 0) { //yes
        
        [self dismissViewControllerAnimated:YES completion:nil];
     //   [self.navigationController popViewControllerAnimated:YES];

    }
    else if (buttonIndex == 1) {
        
        [self performSegueWithIdentifier:@"NewQuestionnaireSegue" sender:self];
    }
}


#pragma mark - UIViewController

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    
    if ([segue.identifier isEqualToString:@"SymptomsSegue"])
    {
        NSDictionary *params = [[NSDictionary alloc]initWithObjects:[NSArray arrayWithObjects:[[ConfigurationManager sharedManager] appID], nil] forKeys:[NSArray arrayWithObjects:@"app_id", nil]];
        [Setting exactMatchWithParams:params offset:0 limit:10 async:^(NSArray *objects, NSError *error) {
            Setting *globals;
            for (Setting *stg in objects)
                if (!error) {
                    if ([objects count] > 0) {
                        globals = [objects objectAtIndex:0]; // there should only be one
                        UIAlertView *alert = [[UIAlertView alloc]init];
                        alert.title = @"Warning!";
                        alert.message = globals.severeSymptomMsg;
                        [alert addButtonWithTitle:@"OK"];
                        [alert setCancelButtonIndex:0];
                        [alert setTag:1];
                        [alert show];
                    }
                }
        }];
        ((MultiSelectSymptomViewController *)segue.destinationViewController).selectedTableData = self.selectedSymptomData;
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        ((MultiSelectSymptomViewController *)segue.destinationViewController).tableData = ad.symptomData;

    }
    else if ([segue.identifier isEqualToString:@"NewQuestionnaireSegue"]) {
        
        ((QuestionnaireViewController *)segue.destinationViewController).patientJournal = self.patientJournal;
        ((QuestionnaireViewController *)segue.destinationViewController).editMode = NO;

    }
    else if ([segue.identifier isEqualToString:@"EditQuestionnaireSegue"]) {
        
        ((QuestionnaireViewController *)segue.destinationViewController).patientJournal = self.patientJournal;
        ((QuestionnaireViewController *)segue.destinationViewController).editMode = YES;
    }
}

- (void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    [self.tableView deselectRowAtIndexPath:[self.tableView indexPathForSelectedRow] animated:YES];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    
    self.navigationItem.title = @"My Journal";
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(symptomsSelected:) name:@"selectedSymptomList" object:nil];
    
    [self loadProfileData];
    
    // manage switches
    // set switch defaults
    BOOL shouldShowSymptonSwitch = TRUE;
    BOOL shouldShowMedicationTakenSwitch = TRUE;
    
    // set switch target overides
    if (   [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
        || [[[ConfigurationManager sharedManager] appID] integerValue] == RA
        || [[[ConfigurationManager sharedManager] appID] integerValue] == MM

        ) {
        shouldShowMedicationTakenSwitch = FALSE;
    }

    int yVal = ([[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0) ? 172 : 152;
    self.symptomTodaySwitch = [[DCRoundSwitch alloc]initWithFrame:CGRectMake(210, yVal, 79, 27)];
    [self.view addSubview:self.symptomTodaySwitch];
    
    if (shouldShowSymptonSwitch) {
        self.symptomTodaySwitch.onText = @"YES";
        self.symptomTodaySwitch.offText = @"NO";
        self.symptomTodaySwitch.onTintColor = [UIColor darkBlue];
        self.journalOnTextField.placeholder = kFieldPlaceHolderText;
        self.dayRatingTextField.placeholder = kFieldPlaceHolderText;
        self.moodIdTextField.placeholder = kFieldPlaceHolderText;
        self.abilityIdTextField.placeholder = kFieldPlaceHolderText;
    }
    
    yVal = ([[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0) ? 304 : 284;
    if (shouldShowMedicationTakenSwitch) {
        
//        UITableView* theTV = self.tableView;
//        UITableViewCell* cell = [theTV cellForRowAtIndexPath:[NSIndexPath indexPathForRow:2 inSection:0]];
//        for (UIView* view in cell.contentView.subviews) {
//            if ([view isKindOfClass:[UILabel class]]) {
//                UILabel* label = (UILabel*)view;
//                label.text = [NSString stringWithFormat:@"RV was here! @%d", view.tag];
//            }
//        }
////        UILabel* theLabel = (UILabel*)[cell.contentView viewWithTag:-366];
////        theLabel.text = @"RV was here!";
        
        self.medicationTakenTodaySwitch = [[DCRoundSwitch alloc]initWithFrame:CGRectMake(210, yVal, 79, 27)];
        [self.view addSubview:self.medicationTakenTodaySwitch];
        self.medicationTakenTodaySwitch.onText = @"YES";
        self.medicationTakenTodaySwitch.offText = @"NO";
        self.medicationTakenTodaySwitch.onTintColor = [UIColor darkBlue];
        [self.symptomTodaySwitch addTarget:self action:@selector(userInteraction) forControlEvents:UIControlEventValueChanged];
        [self.medicationTakenTodaySwitch addTarget:self action:@selector(userInteraction) forControlEvents:UIControlEventValueChanged];
    }
    
    self.dayRatingData = @[@"0 Worst", @"1", @"2", @"3", @"4", @"5", @"6", @"7", @"8", @"9", @"10 Best"];

    self.journalOnTextField.tag = kFormViewControllerFieldDate;
    self.dayRatingTextField.tag = kFormViewControllerFieldNumber;
    self.moodIdTextField.tag = kFormViewControllerFieldNumber;
    self.abilityIdTextField.tag = kFormViewControllerFieldNumber;
    
    self.fields = @[ self.journalOnTextField, self.dayRatingTextField, self.moodIdTextField, self.abilityIdTextField ];

    
    if ([[[ConfigurationManager sharedManager] appID] integerValue] == Diabetes
        || [[[ConfigurationManager sharedManager] appID] integerValue] == COPD
        || [[[ConfigurationManager sharedManager] appID] integerValue] == MM
        || [[[ConfigurationManager sharedManager] appID] integerValue] == RA) {
        
        self.activityData = @[@"Walking", @"Running", @"Bicycling", @"Other", @"None"];
        self.intensityData = @[@"Light", @"Moderate", @"Intense"];

        self.diastolicTextField.placeholder = kFieldPlaceHolderText;
        self.systolicTextField.placeholder = kFieldPlaceHolderText;

        
        self.inputActivityPicker = [[UIPickerView alloc] initWithFrame:CGRectMake(0, 0, 320, 216)];
        self.inputActivityPicker.delegate = self;
        self.inputActivityPicker.dataSource = self;
        self.inputActivityPicker.showsSelectionIndicator = YES;
        
        self.activityTextField.inputView = self.inputActivityPicker;
        self.activityTextField.placeholder = kFieldPlaceHolderText;
        
        self.durationTextField.placeholder = kFieldPlaceHolderText;
        
        
        self.inputIntensityPicker = [[UIPickerView alloc] initWithFrame:CGRectMake(0, 0, 320, 216)];
        self.inputIntensityPicker.delegate = self;
        self.inputIntensityPicker.dataSource = self;
        self.inputIntensityPicker.showsSelectionIndicator = YES;
        
        self.intensityTextField.inputView = self.inputIntensityPicker;
        self.intensityTextField.placeholder = kFieldPlaceHolderText;
        
        
        self.weightTextField.placeholder = kFieldPlaceHolderText;
        self.cholesteralTextField.placeholder = kFieldPlaceHolderText;
        
        
        self.fields = @[ self.journalOnTextField, self.dayRatingTextField, self.moodIdTextField, self.abilityIdTextField, self.diastolicTextField, self.systolicTextField, self.activityTextField, self.durationTextField, self.intensityTextField, self.weightTextField, self.cholesteralTextField ];

        if (self.editMode) {
            
            [self.questionnaireButton setTitle:@"Edit Questionnaire" forState:UIControlStateNormal];
            [self.questionnaireButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            self.questionnaireButton.titleLabel.font = [UIFont boldSystemFontOfSize:kMediumFontSize];
            self.questionnaireButton.clipsToBounds = YES;
            self.questionnaireButton.layer.cornerRadius = 6.0f;
            self.questionnaireButton.backgroundColor = [UIColor darkBlue];
            [self.questionnaireButton addTarget:self action:@selector(questionnaireButtonTapped:) forControlEvents:UIControlEventTouchUpInside];
        }
    }


    
    for (UITextField * field in self.fields) {
        field.inputAccessoryView = self.inputAccessoryViewToolbar;
        
        if (field.tag == kFormViewControllerFieldDate){
            field.inputView = self.inputViewDatePicker;
        }
        
        if (field == self.dayRatingTextField){
            field.inputView = self.inputDayRatingrPicker;
        }
        
        if (field == self.moodIdTextField){
            field.inputView = self.inputMoodPicker;
        }
        
        if (field == self.abilityIdTextField){
            field.inputView = self.inputAbilityPicker;
        }
                
    }
    
    self.patientSymptomData = [self.patientJournal.symptomIds componentsSeparatedByString:@", "];
    self.selectedSymptomIds = self.patientJournal.symptomIds;
    
    
    [self refresh];
    
    //set defaults for required fields
    if (!self.editMode) {
        AppDelegate *ad = (AppDelegate *)[[UIApplication sharedApplication]delegate];
        self.mood = [ad.moodData objectAtIndex:0];
        self.dayRating = [self.dayRatingData objectAtIndex:0];
        self.ability = [ad.abilityData objectAtIndex:0];
    }
}

-(void)userInteraction {
    [self.delegate userInteractedWithViewController:self];
}

-(void)back{
    
    [self saveTapped];
    
}


- (void)dealloc {
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"selectedSymptomList" object:nil];
    
}


@end
